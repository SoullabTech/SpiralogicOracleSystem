# ðŸŒ€ Spiralogic Oracle System - Complete Stack
# Brings up Maya + CSM + Database + Cache + Backend + Frontend

version: "3.8"

services:
  # Sesame CSM - Maya's Voice Engine
  sesame-csm:
    build: 
      context: ./csm
      dockerfile: Dockerfile
    container_name: spiralogic-sesame-csm
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - CUDA_VISIBLE_DEVICES=0
      - NO_TORCH_COMPILE=1
      - HUGGINGFACE_HUB_CACHE=/app/cache
      - TRANSFORMERS_CACHE=/app/cache
      - HUGGINGFACE_HUB_TOKEN=${HUGGINGFACE_HUB_TOKEN:-}
    volumes:
      - csm_cache:/app/cache
      - csm_models:/app/models
      - ${HOME}/.cache/huggingface:/root/.cache/huggingface:ro
    networks:
      - oracle-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s  # CSM takes time to load model

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spiralogic-backend
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=development
      - PORT=3333
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/spiralogic}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SESAME_URL=http://sesame-csm:8000
      - SESAME_API_KEY=local
      - SESAME_PROVIDER=local
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_VOICE_ID=${ELEVENLABS_VOICE_ID}
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - ./logs:/app/logs
    networks:
      - oracle-network
    depends_on:
      - mongo
      - redis
      - sesame-csm
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Next.js
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: spiralogic-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_BACKEND_URL=http://backend:3333
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    volumes:
      - .:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - oracle-network
    depends_on:
      - backend
    restart: unless-stopped

  # MongoDB for consciousness memories
  mongo:
    image: mongo:7
    container_name: oracle-mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=oracle
      - MONGO_INITDB_ROOT_PASSWORD=consciousness2025
      - MONGO_INITDB_DATABASE=spiralogic
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - oracle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session and cache
  redis:
    image: redis:7-alpine
    container_name: oracle-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - oracle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: oracle-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - oracle-system
    networks:
      - oracle-network
    restart: unless-stopped

networks:
  oracle-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local
  csm_cache:
    driver: local
  csm_models:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
