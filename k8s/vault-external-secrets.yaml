# HashiCorp Vault and External Secrets Operator for Spiralogic Oracle System
# Level 5 DevSecOps - Comprehensive secret management

---
# Vault StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: spiralogic
  labels:
    app: vault
    component: secret-management
spec:
  serviceName: vault
  replicas: 3
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: vault
        image: hashicorp/vault:1.15.4
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
            add: ["IPC_LOCK"]
        env:
        - name: VAULT_ADDR
          value: "https://127.0.0.1:8200"
        - name: VAULT_API_ADDR
          value: "https://vault.spiralogic.svc.cluster.local:8200"
        - name: VAULT_CLUSTER_ADDR
          value: "https://$(POD_NAME).vault.spiralogic.svc.cluster.local:8201"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SKIP_CHOWN
          value: "true"
        - name: SKIP_SETCAP
          value: "true"
        command:
        - "/bin/sh"
        - "-ec"
        args:
        - |
          vault server -config=/vault/config/vault.hcl
        ports:
        - name: api
          containerPort: 8200
          protocol: TCP
        - name: cluster
          containerPort: 8201
          protocol: TCP
        - name: replication
          containerPort: 8202
          protocol: TCP
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
          readOnly: true
        - name: vault-data
          mountPath: /vault/data
        - name: vault-logs
          mountPath: /vault/logs
        - name: vault-tls
          mountPath: /vault/tls
          readOnly: true
        livenessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: vault-config
        configMap:
          name: vault-config
      - name: vault-tls
        secret:
          secretName: vault-tls
      - name: vault-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: vault-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: encrypted-ssd
      resources:
        requests:
          storage: 10Gi

---
# Vault Service
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: spiralogic
  labels:
    app: vault
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:account:certificate/cert-id
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8200
    targetPort: 8200
  - name: cluster
    port: 8201
    targetPort: 8201
  selector:
    app: vault

---
# Vault ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: spiralogic
  labels:
    app: vault
automountServiceAccountToken: true

---
# Vault ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list"]

---
# Vault ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault
subjects:
- kind: ServiceAccount
  name: vault
  namespace: spiralogic

---
# Vault Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: spiralogic
data:
  vault.hcl: |
    ui = true

    listener "tcp" {
      address = "0.0.0.0:8200"
      tls_cert_file = "/vault/tls/vault.crt"
      tls_key_file = "/vault/tls/vault.key"
      tls_client_ca_file = "/vault/tls/ca.crt"
      tls_require_and_verify_client_cert = true
      tls_disable_client_certs = false
    }

    listener "tcp" {
      address = "0.0.0.0:8201"
      tls_cert_file = "/vault/tls/vault.crt"
      tls_key_file = "/vault/tls/vault.key"
      tls_client_ca_file = "/vault/tls/ca.crt"
      tls_require_and_verify_client_cert = true
      cluster_address = "https://vault.spiralogic.svc.cluster.local:8201"
    }

    storage "raft" {
      path = "/vault/data"
      node_id = "$(POD_NAME)"

      retry_join {
        leader_api_addr = "https://vault-0.vault.spiralogic.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/vault.crt"
        leader_client_key_file = "/vault/tls/vault.key"
      }

      retry_join {
        leader_api_addr = "https://vault-1.vault.spiralogic.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/vault.crt"
        leader_client_key_file = "/vault/tls/vault.key"
      }

      retry_join {
        leader_api_addr = "https://vault-2.vault.spiralogic.svc.cluster.local:8200"
        leader_ca_cert_file = "/vault/tls/ca.crt"
        leader_client_cert_file = "/vault/tls/vault.crt"
        leader_client_key_file = "/vault/tls/vault.key"
      }
    }

    seal "awskms" {
      region = "us-west-2"
      kms_key_id = "alias/vault-unseal-key"
    }

    api_addr = "https://vault.spiralogic.svc.cluster.local:8200"
    cluster_addr = "https://$(POD_NAME).vault.spiralogic.svc.cluster.local:8201"

    log_level = "INFO"
    log_format = "json"

    # Telemetry
    telemetry {
      prometheus_retention_time = "30s"
      disable_hostname = true
    }

---
# External Secrets Operator - SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: spiralogic
spec:
  provider:
    vault:
      server: "https://vault.spiralogic.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "spiralogic-oracle"
          serviceAccountRef:
            name: "external-secrets"
      caBundle: |
        -----BEGIN CERTIFICATE-----
        # CA certificate content here
        -----END CERTIFICATE-----

---
# External Secrets - OpenAI API Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: openai-secrets
  namespace: spiralogic
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: openai-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        OPENAI_API_KEY: "{{ .openai_api_key }}"
        OPENAI_ORG_ID: "{{ .openai_org_id }}"
  data:
  - secretKey: openai_api_key
    remoteRef:
      key: spiralogic/openai
      property: api_key
  - secretKey: openai_org_id
    remoteRef:
      key: spiralogic/openai
      property: org_id

---
# External Secrets - ElevenLabs API Key
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: elevenlabs-secrets
  namespace: spiralogic
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: elevenlabs-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        ELEVEN_LABS_API_KEY: "{{ .api_key }}"
  data:
  - secretKey: api_key
    remoteRef:
      key: spiralogic/elevenlabs
      property: api_key

---
# External Secrets - Voice Model IDs
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: voice-model-secrets
  namespace: spiralogic
spec:
  refreshInterval: 6h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: voice-model-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        FIRE_VOICE_ID: "{{ .fire }}"
        WATER_VOICE_ID: "{{ .water }}"
        EARTH_VOICE_ID: "{{ .earth }}"
        AIR_VOICE_ID: "{{ .air }}"
        AETHER_VOICE_ID: "{{ .aether }}"
  data:
  - secretKey: fire
    remoteRef:
      key: spiralogic/voices
      property: fire
  - secretKey: water
    remoteRef:
      key: spiralogic/voices
      property: water
  - secretKey: earth
    remoteRef:
      key: spiralogic/voices
      property: earth
  - secretKey: air
    remoteRef:
      key: spiralogic/voices
      property: air
  - secretKey: aether
    remoteRef:
      key: spiralogic/voices
      property: aether

---
# External Secrets - Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secrets
  namespace: spiralogic
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: database-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        POSTGRES_PASSWORD: "{{ .postgres_password }}"
        REDIS_PASSWORD: "{{ .redis_password }}"
        MONGODB_PASSWORD: "{{ .mongodb_password }}"
  data:
  - secretKey: postgres_password
    remoteRef:
      key: spiralogic/database
      property: postgres_password
  - secretKey: redis_password
    remoteRef:
      key: spiralogic/redis
      property: password
  - secretKey: mongodb_password
    remoteRef:
      key: spiralogic/mongodb
      property: password

---
# External Secrets - JWT and Auth Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: auth-secrets
  namespace: spiralogic
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: auth-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_SECRET: "{{ .jwt_secret }}"
        JWT_PRIVATE_KEY: "{{ .jwt_private_key }}"
        JWT_PUBLIC_KEY: "{{ .jwt_public_key }}"
        SESSION_SECRET: "{{ .session_secret }}"
        SESSION_ENCRYPTION_KEY: "{{ .session_encryption_key }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: spiralogic/auth
      property: jwt_secret
  - secretKey: jwt_private_key
    remoteRef:
      key: spiralogic/auth
      property: jwt_private_key
  - secretKey: jwt_public_key
    remoteRef:
      key: spiralogic/auth
      property: jwt_public_key
  - secretKey: session_secret
    remoteRef:
      key: spiralogic/auth
      property: session_secret
  - secretKey: session_encryption_key
    remoteRef:
      key: spiralogic/auth
      property: session_encryption_key

---
# External Secrets - Blockchain Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: blockchain-secrets
  namespace: spiralogic
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: blockchain-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        SNET_PRIVATE_KEY: "{{ .snet_private_key }}"
        SNET_WALLET_ADDRESS: "{{ .snet_wallet_address }}"
        AKASH_KEYRING: "{{ .akash_keyring }}"
        AKASH_DEPLOYMENT_CERT: "{{ .akash_deployment_cert }}"
        IPFS_PRIVATE_KEY: "{{ .ipfs_private_key }}"
        IPFS_SWARM_KEY: "{{ .ipfs_swarm_key }}"
  data:
  - secretKey: snet_private_key
    remoteRef:
      key: spiralogic/snet
      property: private_key
  - secretKey: snet_wallet_address
    remoteRef:
      key: spiralogic/snet
      property: wallet_address
  - secretKey: akash_keyring
    remoteRef:
      key: spiralogic/akash
      property: keyring
  - secretKey: akash_deployment_cert
    remoteRef:
      key: spiralogic/akash
      property: deployment_cert
  - secretKey: ipfs_private_key
    remoteRef:
      key: spiralogic/ipfs
      property: private_key
  - secretKey: ipfs_swarm_key
    remoteRef:
      key: spiralogic/ipfs
      property: swarm_key

---
# External Secrets - Consciousness Encryption Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: consciousness-secrets
  namespace: spiralogic
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: consciousness-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        CONSCIOUSNESS_ENCRYPTION_KEY: "{{ .encryption_key }}"
        CONSCIOUSNESS_SIGNING_KEY: "{{ .signing_key }}"
        VOICE_ENCRYPTION_KEY: "{{ .voice_encryption_key }}"
        MODEL_ENCRYPTION_KEY: "{{ .model_encryption_key }}"
  data:
  - secretKey: encryption_key
    remoteRef:
      key: spiralogic/consciousness
      property: master_key
  - secretKey: signing_key
    remoteRef:
      key: spiralogic/consciousness
      property: signing_key
  - secretKey: voice_encryption_key
    remoteRef:
      key: spiralogic/voice-encryption
      property: master_key
  - secretKey: model_encryption_key
    remoteRef:
      key: spiralogic/models
      property: encryption_key

---
# External Secrets - Monitoring Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: spiralogic
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: monitoring-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        GRAFANA_ADMIN_PASSWORD: "{{ .grafana_admin_password }}"
        GRAFANA_SECRET_KEY: "{{ .grafana_secret_key }}"
        PROMETHEUS_CERT: "{{ .prometheus_cert }}"
        PROMETHEUS_KEY: "{{ .prometheus_key }}"
        LOKI_AUTH_TOKEN: "{{ .loki_auth_token }}"
        JAEGER_AUTH_TOKEN: "{{ .jaeger_auth_token }}"
  data:
  - secretKey: grafana_admin_password
    remoteRef:
      key: spiralogic/monitoring
      property: grafana_admin_password
  - secretKey: grafana_secret_key
    remoteRef:
      key: spiralogic/monitoring
      property: grafana_secret_key
  - secretKey: prometheus_cert
    remoteRef:
      key: spiralogic/monitoring
      property: prometheus_cert
  - secretKey: prometheus_key
    remoteRef:
      key: spiralogic/monitoring
      property: prometheus_key
  - secretKey: loki_auth_token
    remoteRef:
      key: spiralogic/monitoring
      property: loki_auth_token
  - secretKey: jaeger_auth_token
    remoteRef:
      key: spiralogic/monitoring
      property: jaeger_auth_token

---
# External Secrets - Backup and Compliance
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backup-secrets
  namespace: spiralogic
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backup-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        BACKUP_ENCRYPTION_KEY: "{{ .backup_encryption_key }}"
        BACKUP_SIGNING_KEY: "{{ .backup_signing_key }}"
        S3_ACCESS_KEY: "{{ .s3_access_key }}"
        S3_SECRET_KEY: "{{ .s3_secret_key }}"
        S3_BUCKET_ENCRYPTION_KEY: "{{ .s3_bucket_key }}"
        COMPLIANCE_ENCRYPTION_KEY: "{{ .compliance_encryption_key }}"
        COMPLIANCE_SIGNING_KEY: "{{ .compliance_signing_key }}"
        AUDIT_LOG_ENCRYPTION_KEY: "{{ .audit_log_encryption_key }}"
  data:
  - secretKey: backup_encryption_key
    remoteRef:
      key: spiralogic/backup
      property: encryption_key
  - secretKey: backup_signing_key
    remoteRef:
      key: spiralogic/backup
      property: signing_key
  - secretKey: s3_access_key
    remoteRef:
      key: spiralogic/backup
      property: s3_access_key
  - secretKey: s3_secret_key
    remoteRef:
      key: spiralogic/backup
      property: s3_secret_key
  - secretKey: s3_bucket_key
    remoteRef:
      key: spiralogic/backup
      property: s3_bucket_key
  - secretKey: compliance_encryption_key
    remoteRef:
      key: spiralogic/compliance
      property: encryption_key
  - secretKey: compliance_signing_key
    remoteRef:
      key: spiralogic/compliance
      property: signing_key
  - secretKey: audit_log_encryption_key
    remoteRef:
      key: spiralogic/audit
      property: log_encryption_key

---
# External Secrets Operator ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: spiralogic
  labels:
    app: external-secrets
automountServiceAccountToken: true

---
# External Secrets Operator ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get"]
- apiGroups: ["external-secrets.io"]
  resources: ["secretstores", "externalsecrets", "clustersecretstores"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# External Secrets Operator ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets
subjects:
- kind: ServiceAccount
  name: external-secrets
  namespace: spiralogic