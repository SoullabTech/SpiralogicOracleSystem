name: Vercel Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install Vercel CLI
        run: npm install --global vercel@latest

      - name: üîç Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          NODE_ENV: production

      - name: üöÄ Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: üí¨ Create deployment comment
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## üéâ Deployment Successful!
              
              **Production URL:** ${deploymentUrl}
              **Commit:** ${context.sha.substring(0, 7)}
              **Deployed at:** ${new Date().toISOString()}
              
              ### Deployment Checklist:
              - ‚úÖ Build successful
              - ‚úÖ Deployed to Vercel
              - ‚úÖ Environment variables configured
              
              Visit your [Vercel Dashboard](https://vercel.com/dashboard) for more details.`
            })

      - name: üè∑Ô∏è Create GitHub Deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              task: 'deploy',
              auto_merge: false,
              required_contexts: [],
              environment: 'production',
              description: 'Vercel production deployment'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              target_url: '${{ steps.deploy.outputs.deployment-url }}',
              description: 'Deployment successful'
            });

  post-deployment-checks:
    name: Post-Deployment Health Checks
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
      - name: üîç Check deployment health
        run: |
          # Wait for deployment to be fully ready
          sleep 30
          
          # Check if the site is accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }})
          if [ $response -eq 200 ]; then
            echo "‚úÖ Site is accessible (HTTP $response)"
          else
            echo "‚ö†Ô∏è Site returned HTTP $response"
            exit 1
          fi

      - name: üß™ Run smoke tests
        continue-on-error: true
        run: |
          # Basic API health check
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || echo "API health check failed"
          
          # Check critical pages
          for page in "/" "/auth/signin" "/dashboard"; do
            curl -f "${{ secrets.PRODUCTION_URL }}$page" || echo "Page $page check failed"
          done