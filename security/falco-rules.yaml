# Falco Security Rules for Spiralogic Oracle System
# Level 5 DevSecOps - Runtime threat detection

# =====================================
# SPIRALOGIC-SPECIFIC RULES
# =====================================

- rule: Consciousness Model Tampering
  desc: Detect unauthorized access to AI consciousness models
  condition: >
    (open_write or rename or unlink) and
    (fd.name contains "/app/models/" or
     fd.name contains "consciousness" or
     fd.name contains "sacred-mirror" or
     fd.name contains ".h5" or
     fd.name contains ".ckpt" or
     fd.name contains ".pt") and
    not proc.name in (node, python, consciousness-service, model-loader) and
    not user.name in (spiralogic, nonroot)
  output: >
    CRITICAL: Unauthorized consciousness model access detected
    (user=%user.name process=%proc.name file=%fd.name container=%container.name
     command=%proc.cmdline image=%container.image.repository)
  priority: CRITICAL
  tags: [consciousness, models, tampering, integrity]
  source: syscall

- rule: Elemental Agent Communication Anomaly
  desc: Detect unusual inter-agent communication patterns
  condition: >
    (evt.type in (connect, accept)) and
    container.name contains "agent" and
    not (fd.rip in (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 127.0.0.1)) and
    not fd.rip startswith "10.42." and
    not fd.rip startswith "10.43."
  output: >
    WARNING: Unusual elemental agent external communication
    (agent=%container.name destination=%fd.rip:%fd.rport process=%proc.name
     command=%proc.cmdline)
  priority: WARNING
  tags: [consciousness, agents, network, anomaly]
  source: syscall

- rule: Sacred Mirror Biometric Data Access
  desc: Monitor access to sacred mirror biometric data
  condition: >
    (open_read or open_write) and
    (fd.name contains "sacred-mirror" or
     fd.name contains "biometric" or
     fd.name contains "holoflower" or
     fd.name contains "consciousness-state") and
    not proc.name in (node, sacred-mirror-service) and
    not user.name in (spiralogic, nonroot)
  output: >
    CRITICAL: Unauthorized sacred mirror data access
    (user=%user.name process=%proc.name file=%fd.name container=%container.name)
  priority: CRITICAL
  tags: [sacred-mirror, biometric, privacy, access]
  source: syscall

- rule: Voice Model Encryption Bypass
  desc: Detect attempts to access unencrypted voice models
  condition: >
    (open_read or open_write) and
    fd.name contains "voice" and
    (fd.name contains ".wav" or fd.name contains ".mp3" or fd.name contains "elevenlabs") and
    not fd.name contains ".enc" and
    not proc.name in (node, voice-service, encryption-service)
  output: >
    WARNING: Potential voice model encryption bypass
    (process=%proc.name file=%fd.name container=%container.name user=%user.name)
  priority: WARNING
  tags: [voice, encryption, bypass, models]
  source: syscall

- rule: Oracle Session Hijacking Attempt
  desc: Detect potential oracle session hijacking
  condition: >
    (open_read or open_write) and
    (fd.name contains "session" or fd.name contains "token" or fd.name contains "jwt") and
    proc.name != "node" and
    not user.name in (spiralogic, nonroot)
  output: >
    CRITICAL: Potential oracle session hijacking attempt
    (process=%proc.name file=%fd.name user=%user.name container=%container.name)
  priority: CRITICAL
  tags: [session, hijacking, authentication, security]
  source: syscall

# =====================================
# CONTAINER SECURITY RULES
# =====================================

- rule: Spiralogic Container Privilege Escalation
  desc: Detect privilege escalation in Spiralogic containers
  condition: >
    container.name contains "spiralogic" and
    (setuid or setgid or change_thread_namespace) and
    not user.name in (root, spiralogic, nonroot)
  output: >
    CRITICAL: Privilege escalation in Spiralogic container
    (user=%user.name process=%proc.name container=%container.name
     syscall=%evt.type args=%evt.args)
  priority: CRITICAL
  tags: [privilege-escalation, container, security]
  source: syscall

- rule: Spiralogic Container Shell Access
  desc: Detect shell access in production Spiralogic containers
  condition: >
    container.name contains "spiralogic" and
    proc.name in (bash, sh, zsh, fish, csh, ksh) and
    not proc.pname in (node, python, entrypoint.sh, docker-entrypoint.sh)
  output: >
    WARNING: Shell access detected in Spiralogic container
    (user=%user.name shell=%proc.name parent=%proc.pname container=%container.name
     command=%proc.cmdline)
  priority: WARNING
  tags: [shell, access, container, investigation]
  source: syscall

- rule: Spiralogic Container Mount Tampering
  desc: Detect unauthorized mount operations in containers
  condition: >
    container.name contains "spiralogic" and
    (evt.type in (mount, umount)) and
    not proc.name in (runc, containerd, dockerd)
  output: >
    CRITICAL: Unauthorized mount operation in Spiralogic container
    (process=%proc.name mount_info=%evt.args container=%container.name)
  priority: CRITICAL
  tags: [mount, tampering, container, security]
  source: syscall

# =====================================
# KUBERNETES SECURITY RULES
# =====================================

- rule: Spiralogic Pod Security Context Violation
  desc: Detect violations of pod security context
  condition: >
    k8s_audit and
    ka.target.namespace contains "spiralogic" and
    ka.verb in (create, update) and
    ka.target.resource = "pods" and
    (ka.req.pod.security_context.run_as_user = 0 or
     ka.req.pod.security_context.privileged = true or
     ka.req.pod.security_context.allow_privilege_escalation = true)
  output: >
    CRITICAL: Pod security context violation in Spiralogic namespace
    (user=%ka.user.name verb=%ka.verb pod=%ka.target.name
     namespace=%ka.target.namespace reason=%ka.response_reason)
  priority: CRITICAL
  tags: [kubernetes, pod, security-context, violation]
  source: k8s_audit

- rule: Spiralogic Secret Access Anomaly
  desc: Detect unusual secret access patterns
  condition: >
    k8s_audit and
    ka.target.namespace contains "spiralogic" and
    ka.target.resource = "secrets" and
    ka.verb in (get, list) and
    not ka.user.name contains "system:" and
    not ka.user.name contains "external-secrets"
  output: >
    WARNING: Unusual secret access in Spiralogic namespace
    (user=%ka.user.name verb=%ka.verb secret=%ka.target.name
     namespace=%ka.target.namespace)
  priority: WARNING
  tags: [kubernetes, secrets, access, anomaly]
  source: k8s_audit

# =====================================
# NETWORK SECURITY RULES
# =====================================

- rule: Spiralogic Unauthorized Outbound Connection
  desc: Detect unauthorized outbound connections from Spiralogic containers
  condition: >
    outbound and
    container.name contains "spiralogic" and
    not (fd.rip in (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)) and
    not (fd.rip in ("api.openai.com", "api.elevenlabs.io", "vault.service.consul")) and
    not fd.rport in (53, 123) and
    proc.name != "node"
  output: >
    WARNING: Unauthorized outbound connection from Spiralogic container
    (container=%container.name process=%proc.name destination=%fd.rip:%fd.rport
     command=%proc.cmdline)
  priority: WARNING
  tags: [network, outbound, unauthorized, connection]
  source: syscall

- rule: Spiralogic Port Scanning Detection
  desc: Detect potential port scanning from Spiralogic containers
  condition: >
    outbound and
    container.name contains "spiralogic" and
    evt.type = connect and
    fd.sport_name = "" and
    fd.dport_name = ""
  output: >
    WARNING: Potential port scanning from Spiralogic container
    (container=%container.name process=%proc.name target=%fd.rip:%fd.rport
     source_port=%fd.lport)
  priority: WARNING
  tags: [network, port-scanning, reconnaissance]
  source: syscall

# =====================================
# DATA PROTECTION RULES
# =====================================

- rule: Spiralogic Database Connection Anomaly
  desc: Detect unusual database connection patterns
  condition: >
    outbound and
    container.name contains "spiralogic" and
    fd.rport in (5432, 27017, 6379, 3306) and
    not proc.name in (node, python, postgres, mongod, redis-server, mysql)
  output: >
    WARNING: Unusual database connection from Spiralogic container
    (container=%container.name process=%proc.name database_port=%fd.rport
     destination=%fd.rip command=%proc.cmdline)
  priority: WARNING
  tags: [database, connection, anomaly, access]
  source: syscall

- rule: Spiralogic Backup Data Access
  desc: Monitor access to backup data
  condition: >
    (open_read or open_write) and
    (fd.name contains "backup" or fd.name contains ".bak" or fd.name contains "dump") and
    container.name contains "spiralogic" and
    not proc.name in (backup-service, node, pg_dump, mongodump)
  output: >
    WARNING: Backup data access in Spiralogic container
    (container=%container.name process=%proc.name file=%fd.name user=%user.name)
  priority: WARNING
  tags: [backup, data, access, monitoring]
  source: syscall

# =====================================
# COMPLIANCE & AUDIT RULES
# =====================================

- rule: Spiralogic Audit Log Tampering
  desc: Detect tampering with audit logs
  condition: >
    (open_write or unlink or rename) and
    (fd.name contains "audit" or fd.name contains ".log") and
    container.name contains "spiralogic" and
    not proc.name in (rsyslog, fluentd, filebeat, auditd)
  output: >
    CRITICAL: Potential audit log tampering in Spiralogic container
    (container=%container.name process=%proc.name file=%fd.name
     operation=%evt.type user=%user.name)
  priority: CRITICAL
  tags: [audit, log, tampering, compliance]
  source: syscall

- rule: Spiralogic Configuration Change
  desc: Monitor configuration file changes
  condition: >
    (open_write or rename or unlink) and
    (fd.name contains "config" or fd.name contains ".conf" or
     fd.name contains ".yaml" or fd.name contains ".json") and
    container.name contains "spiralogic" and
    not proc.name in (node, config-reloader, external-secrets)
  output: >
    INFO: Configuration change detected in Spiralogic container
    (container=%container.name process=%proc.name file=%fd.name
     operation=%evt.type command=%proc.cmdline)
  priority: INFO
  tags: [configuration, change, monitoring]
  source: syscall

# =====================================
# INCIDENT RESPONSE RULES
# =====================================

- rule: Spiralogic Emergency Shutdown Trigger
  desc: Detect conditions requiring emergency shutdown
  condition: >
    container.name contains "spiralogic" and
    (proc.name contains "rm" and proc.args contains "/app") or
    (proc.name contains "kill" and proc.args contains "-9") or
    (evt.type = unlink and fd.name contains "/app/models/")
  output: >
    EMERGENCY: Emergency shutdown condition detected in Spiralogic container
    (container=%container.name process=%proc.name command=%proc.cmdline
     operation=%evt.type file=%fd.name)
  priority: EMERGENCY
  tags: [emergency, shutdown, incident, response]
  source: syscall

- rule: Spiralogic Memory Dump Attempt
  desc: Detect attempts to dump memory contents
  condition: >
    container.name contains "spiralogic" and
    (proc.name in (gdb, strace, ltrace, gcore) or
     proc.cmdline contains "core" or
     proc.cmdline contains "dump")
  output: >
    CRITICAL: Memory dump attempt detected in Spiralogic container
    (container=%container.name process=%proc.name command=%proc.cmdline
     user=%user.name)
  priority: CRITICAL
  tags: [memory, dump, forensics, security]
  source: syscall

# =====================================
# PERFORMANCE & HEALTH RULES
# =====================================

- rule: Spiralogic High Resource Usage
  desc: Detect containers using excessive resources
  condition: >
    container.name contains "spiralogic" and
    (proc.cpu_usage > 90 or proc.memory_usage > 90)
  output: >
    WARNING: High resource usage in Spiralogic container
    (container=%container.name process=%proc.name cpu_usage=%proc.cpu_usage
     memory_usage=%proc.memory_usage)
  priority: WARNING
  tags: [performance, resource, usage, monitoring]
  source: syscall

# =====================================
# CUSTOM OUTPUTS FOR INCIDENT RESPONSE
# =====================================

- rule: Spiralogic Security Incident
  desc: Aggregate rule for security incidents requiring immediate response
  condition: >
    (Consciousness Model Tampering or
     Sacred Mirror Biometric Data Access or
     Spiralogic Container Privilege Escalation or
     Spiralogic Emergency Shutdown Trigger)
  output: >
    INCIDENT: Security incident detected - immediate response required
    (incident_type=%rule alert_time=%evt.time container=%container.name
     process=%proc.name user=%user.name)
  priority: CRITICAL
  tags: [incident, response, security, critical]
  source: syscall

# =====================================
# MACRO DEFINITIONS
# =====================================

- macro: spiralogic_processes
  condition: >
    proc.name in (node, python, consciousness-service, sacred-mirror-service,
                  voice-service, oracle-service, elemental-agent)

- macro: legitimate_file_access
  condition: >
    user.name in (spiralogic, nonroot, node) and
    proc.name in (node, python, nginx, postgres, redis-server)

- macro: spiralogic_namespaces
  condition: >
    ka.target.namespace in (spiralogic, spiralogic-prod, spiralogic-staging,
                           spiralogic-system, oracle-system)

# =====================================
# EXCEPTION LISTS
# =====================================

- list: spiralogic_allowed_outbound_domains
  items:
    [
      "api.openai.com",
      "api.elevenlabs.io",
      "vault.service.consul",
      "prometheus.monitoring.svc.cluster.local",
      "grafana.monitoring.svc.cluster.local",
      "jaeger.observability.svc.cluster.local",
    ]

- list: spiralogic_system_processes
  items:
    [
      "runc",
      "containerd",
      "dockerd",
      "kubelet",
      "kube-proxy",
      "external-secrets",
      "vault-agent",
      "istio-proxy",
    ]

- list: spiralogic_config_files
  items:
    [
      "/app/config.json",
      "/etc/spiralogic/oracle.yaml",
      "/etc/ssl/certs/spiralogic.crt",
      "/var/run/secrets/kubernetes.io/serviceaccount",
    ]
