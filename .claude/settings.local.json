{
  "permissions": {
    "allow": [
      "Bash(npx tsc:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(grep:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git filter-branch:*)",
      "Bash(git stash:*)",
      "Bash(git filter-repo:*)",
      "Bash(git remote add:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(timeout 5 npm run start:minimal)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(ls:*)",
      "Bash(timeout:*)",
      "Bash(node:*)",
      "Bash(npm run dev:*)",
      "Bash(cat:*)",
      "Bash(cp:*)",
      "Bash(true)",
      "Bash(git ls-tree:*)",
      "Bash(mv:*)",
      "Bash(npx vercel:*)",
      "WebFetch(domain:frontend-asklr7br2-spiralogic-oracle-system.vercel.app)",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(npm run lint)",
      "Bash(npx ts-node:*)",
      "Bash(chmod:*)",
      "Bash(curl:*)",
      "Bash(npx tsx:*)",
      "Bash(NODE_ENV=test VITE_SUPABASE_URL=test VITE_SUPABASE_ANON_KEY=test npx ts-node --esm src/tests/test-oracle-modes.ts)",
      "Bash(npm start)",
      "Bash(kill:*)",
      "Bash(vercel:*)",
      "Bash(rg:*)",
      "Bash(npm audit:*)",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"Sacred Technology Interface|Sacred Technology Platform|Sacred Tech\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -B2 -A2 \"Sacred Technology Platform\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -B3 -A3 \"Soullab Sacred Technology\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"#FFD700|#FFC107|#FFB300|#FFCA28|#FFEB3B|#FDD835\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"rgb\\(255,\\s*215,\\s*0\\)|rgba\\(255,\\s*215,\\s*0\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"sacred-gold|#c9b037\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"yellow-[3-5]00|amber-[3-5]00|gold\" --include=\"*.tsx\" --include=\"*.jsx\" --include=\"*.ts\" --include=\"*.js\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"yellow-[3-5]00|amber-[3-5]00\" -g \"*.tsx\" -g \"*.jsx\" -g \"*.ts\" -g \"*.js\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"#d4af37|divine-gold|sacred-amber\" -g \"*.tsx\" -g \"*.jsx\" -g \"*.ts\" -g \"*.js\" -g \"*.css\")",
      "Bash(tsc --build)",
      "Bash(npm run start:prod:*)",
      "Bash(brew list:*)",
      "Bash(brew install:*)",
      "Bash(python3.11:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(npm cache clean:*)",
      "Bash(export:*)",
      "Bash(gtimeout:*)",
      "Bash(npm view:*)",
      "mcp__ide__getDiagnostics",
      "Bash(npm update)",
      "Bash(npm uninstall:*)",
      "Bash(git tag:*)",
      "Bash(npm test:*)",
      "Bash(pkill:*)",
      "Bash(./setup-domains.sh:*)",
      "Bash(sudo killall:*)",
      "Bash(dig:*)",
      "Bash(./check-deployment.sh)",
      "Bash(npx next-auth:*)",
      "Bash(openssl rand:*)",
      "Bash(npm run voice:test:matrix:*)",
      "Bash(npm run voice:setup:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(TEST_FALLBACK=true npm run voice:test:matrix)",
      "Bash(pip uninstall:*)",
      "Bash(npm run voice:play:*)",
      "Bash(afplay:*)",
      "Bash(npm run:*)",
      "Bash(TEST_FALLBACK=true node testMayaActivation.js)",
      "Bash(npx jest:*)",
      "Bash(git checkout:*)",
      "mcp__ide__executeCode",
      "Bash(git -C \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" status)",
      "Bash(git --git-dir=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/.git\" --work-tree=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" status)",
      "Bash(REPO_PATH=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\")",
      "Bash(exec zsh)",
      "Bash(bash -c 'cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" && git status --porcelain')",
      "Bash(env -i bash -c 'cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" && /usr/bin/git status')",
      "Bash(unset ZDOTDIR)",
      "Bash(/bin/bash -l -c 'cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" && git status')",
      "WebFetch(domain:spiralogic-oracle-system.vercel.app)",
      "WebFetch(domain:soullab.life)",
      "Bash(npm i:*)",
      "Bash(pip3 install:*)",
      "Bash(pipx install:*)",
      "Bash(cd:*)",
      "Bash(npm --version)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(NODE_ENV=production npm run build)",
      "Bash(git init:*)",
      "Bash(git subtree push:*)",
      "Bash(git gc:*)",
      "Bash(git subtree split:*)",
      "Bash(claude doctor)",
      "Bash(git config:*)",
      "Bash(git pull:*)",
      "Bash(docker system prune:*)",
      "Bash(docker volume prune:*)",
      "Bash(sudo du:*)",
      "Bash(~/cleanup_mac.sh)",
      "Bash(sudo pkill:*)",
      "Bash(open:*)",
      "Bash(docker:*)",
      "Bash(sed:*)",
      "Bash(xattr:*)",
      "Bash(git reset:*)",
      "Bash(npx depcheck:*)",
      "Bash(npx eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(git branch:*)",
      "Bash(npm -w backend run clean)",
      "Bash(npm -w backend run build)",
      "Bash(npm -w backend test -- -i)",
      "Bash(npx husky init:*)",
      "Bash(npx husky:*)",
      "Bash(bash:*)",
      "Bash(npm ls:*)",
      "Bash(npm remove:*)",
      "Bash(PORT=3002 PSI_LITE_ENABLED=true PSI_LEARNING_ENABLED=true PSI_LEARNING_RATE=0.08 PSI_MEMORY_ENABLED=true npm start)",
      "Bash(npx next build:*)",
      "Bash(cd:*)",
      "Bash(PORT=3001 npm start)",
      "Bash(make:*)",
      "Bash(git fetch:*)",
      "Bash(supabase start:*)",
      "Bash(supabase db reset:*)",
      "Bash(supabase status:*)",
      "Bash(psql:*)",
      "Bash(if grep -q \"NEXT_PUBLIC_SUPABASE_URL\" .env*)",
      "Bash(then echo \"NEXT_PUBLIC_SUPABASE_URL found in env files\")",
      "Bash(else echo \"NEXT_PUBLIC_SUPABASE_URL not found in env files - skipping RPC test\")",
      "Bash(fi)",
      "Bash(echo $DEPLOY_TARGET)",
      "Bash(NODE_ENV=development npm run dev -- --port 3001)",
      "Bash(cd:*)",
      "Bash(npx next dev:*)",
      "Bash(cd:*)",
      "Bash(claude --version)",
      "Bash(ROOT=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\")",
      "Bash(osascript:*)",
      "Bash(ln:*)",
      "Bash(while [ -f ~/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw ])",
      "Bash(do echo \"Waiting for move to complete...\")",
      "Bash(done)",
      "Bash(rsync:*)",
      "Bash(SSD_MOUNT=\"/Volumes/T7 Shield\")",
      "Bash(TARGET_DIR=\"$SSD_MOUNT/DockerData/DockerDesktop\")",
      "Bash(echo \"Created: $TARGET_DIR\")",
      "Bash(DOCKER_RAW=\"/Users/andreanezat/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw\")",
      "Bash(TARGET_DIR=\"/Volumes/T7 Shield/DockerData/DockerDesktop\")",
      "Bash(SSD_VOLUME_NAME=\"T7 Shield\")",
      "Bash(SSD_SUBDIR=\"DockerData/DockerDesktop\")",
      "Bash(SSD_MOUNT=\"/Volumes/$SSD_VOLUME_NAME\")",
      "Bash(TARGET_DIR=\"$SSD_MOUNT/$SSD_SUBDIR\")",
      "Bash(if [ ! -d \"$SSD_MOUNT\" ])",
      "Bash(then echo \"✖ SSD not mounted at: $SSD_MOUNT\")",
      "Bash(exit 1)",
      "Bash(echo \"✓ Target directory ready: $TARGET_DIR\")",
      "Bash(# --- CONFIG: edit if your SSD path differs ---\nSSD_MOUNT=\"\"/Volumes/T7 Shield\"\"\nSSD_SUBDIR=\"\"DockerData/DockerDesktop\"\"\n# ---------------------------------------------\n\nset -euo pipefail\n\necho \"\"1) Quit Docker Desktop\"\"\nosascript -e ''quit app \"\"Docker\"\"'' || true\nsleep 2\n\necho \"\"2) Ensure SSD target exists and is writable\"\"\nTARGET_DIR=\"\"${SSD_MOUNT}/${SSD_SUBDIR}\"\"\n[ -d \"\"$SSD_MOUNT\"\" ] || { echo \"\"SSD not mounted at: $SSD_MOUNT\"\"; exit 1; }\nmkdir -p \"\"$TARGET_DIR\"\"\ntouch \"\"$TARGET_DIR/.write-test\"\" && rm -f \"\"$TARGET_DIR/.write-test\"\"\n\necho \"\"3) Locate current Docker.raw\"\"\nDOCKER_RAW=\"\"\"\"\nfor p in \\\n  \"\"$HOME/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw\"\" \\\n  \"\"$HOME/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw\"\" \\\n  \"\"$HOME/Library/Containers/com.docker.docker/Data/docker.raw\"\"\ndo\n  if [ -f \"\"$p\"\" ]; then DOCKER_RAW=\"\"$p\"\"; break; fi\ndone\n[ -n \"\"$DOCKER_RAW\"\" ] || DOCKER_RAW=\"\"$(/usr/bin/find \"\"$HOME/Library/Containers/com.docker.docker\"\" -name Docker.raw -type f 2>/dev/null | head -n1 || true)\"\"\n[ -f \"\"$DOCKER_RAW\"\" ] || { echo \"\"Could not find Docker.raw under ~/Library/Containers/com.docker.docker\"\"; exit 1; }\necho \"\"   Found: $DOCKER_RAW\"\"\n\nTARGET_RAW=\"\"${TARGET_DIR}/Docker.raw\"\"\n\necho \"\"4) Move Docker.raw to SSD (copy+verify, then delete original)\"\"\nrsync -aP --sparse \"\"$DOCKER_RAW\"\" \"\"$TARGET_RAW\"\"\n\nSRC_SIZE=$(stat -f%z \"\"$DOCKER_RAW\"\")\nDST_SIZE=$(stat -f%z \"\"$TARGET_RAW\"\")\necho \"\"   Source bytes: $SRC_SIZE\"\"\necho \"\"   Target bytes: $DST_SIZE\"\"\n[ \"\"$SRC_SIZE\"\" = \"\"$DST_SIZE\"\" ] || { echo \"\"Size mismatch after copy; aborting\"\"; exit 1; }\n\n# Remove original to free internal space\nmv \"\"$DOCKER_RAW\"\" \"\"${DOCKER_RAW}.bak\"\"\nrm -f \"\"${DOCKER_RAW}.bak\"\"\n\necho \"\"5) Create symlink back at original path\"\"\n# Recreate original path directory if needed and link\nmkdir -p \"\"$(dirname \"\"$DOCKER_RAW\"\")\"\"\nln -s \"\"$TARGET_RAW\"\" \"\"$DOCKER_RAW\"\"\nls -l \"\"$DOCKER_RAW\"\"\n\necho \"\"6) Start Docker Desktop\"\"\nopen -ga \"\"Docker\"\"\n# give it a few seconds to boot\nfor i in {1..20}; do sleep 1; done\n\necho \"\"7) Verify Docker is using the SSD file\"\"\nreadlink \"\"$DOCKER_RAW\"\" || true\nif lsof | grep -q \"\"$TARGET_RAW\"\"; then\n  echo \"\"✓ Confirmed: Docker.raw is open from SSD ($TARGET_RAW)\"\"\nelse\n  echo \"\"⚠ Didn''t catch it with lsof yet; Docker may still be initializing.\"\"\n  echo \"\"   You can re-run:  lsof | grep \\\"\"$TARGET_RAW\\\"\"\"\"\nfi)",
      "Bash(__NEW_LINE__ echo \"1) Quit Docker Desktop\")",
      "Bash(./move_docker.sh:*)",
      "Bash(# === CONFIG ===\nSSD=\"\"/Volumes/T7 Shield\"\"\nTARGET=\"\"$SSD/DockerData/DockerDesktop/Docker.raw\"\"\n\n# 0) Make sure the SSD target folder exists and is writable\nmkdir -p \"\"$(dirname \"\"$TARGET\"\")\"\"\ntouch \"\"$(dirname \"\"$TARGET\"\")/.write-test\"\" && rm -f \"\"$(dirname \"\"$TARGET\"\")/.write-test\"\"\n\n# 1) Quit Docker (in case it''s half-started)\nosascript -e ''quit app \"\"Docker\"\"'' || true\nsleep 2\n\n# 2) Prepare the common Docker.raw locations and point them to the SSD\nCANDIDATES=(\n  \"\"$HOME/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw\"\"\n  \"\"$HOME/Library/Containers/com.docker.docker/Data/vms/0/Docker.raw\"\"\n  \"\"$HOME/Library/Containers/com.docker.docker/Data/docker.raw\"\"\n  \"\"$HOME/Library/Group Containers/group.com.docker/DockerApp/disk/Docker.raw\"\"\n)\nfor f in \"\"${CANDIDATES[@]}\"\"; do\n  mkdir -p \"\"$(dirname \"\"$f\"\")\"\"\n  [ -e \"\"$f\"\" ] && rm -f \"\"$f\"\"   # remove stale file or symlink if present\n  ln -s \"\"$TARGET\"\" \"\"$f\"\"\n  echo \"\"→ Linked: $f -> $TARGET\"\"\ndone\n\n# 3) Start Docker; it will create/use Docker.raw through the symlink on the SSD\nopen -ga Docker\necho \"\"Starting Docker…\"\"\nsleep 12\n\n# 4) Verify: the Library path(s) should be symlinks, and the SSD file should be opened\nfor f in \"\"${CANDIDATES[@]}\"\"; do\n  [ -L \"\"$f\"\" ] && ls -l \"\"$f\"\"\ndone\nlsof | grep -q \"\"$TARGET\"\" && echo \"\"✓ Docker is using the SSD-backed Docker.raw: $TARGET\"\" || echo \"\"…If blank, wait a few seconds and re-run: lsof | grep \\\"\"$TARGET\\\"\"\"\")",
      "Bash(# === CONFIG ===\nSSD=\"\"/Volumes/T7 Shield\"\"\nTARGET=\"\"$SSD/DockerData/DockerDesktop/Docker.raw\"\"\n\n# 0) Make sure the SSD target folder exists and is writable\nmkdir -p \"\"$(dirname \"\"$TARGET\"\")\"\"\ntouch \"\"$(dirname \"\"$TARGET\"\")/.write-test\"\" && rm -f \"\"$(dirname \"\"$TARGET\"\")/.write-test\"\")",
      "Bash(/tmp/fix_docker.sh:*)",
      "Bash(/tmp/cleanup.sh:*)",
      "Bash(/usr/bin/python3:*)",
      "Bash(osascript -e 'quit app \"\"Docker\"\"')",
      "Bash(pkill -f \"Docker Desktop\")",
      "Bash(python3 /tmp/fix_docker_credentials.py)",
      "Bash(cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\")",
      "Bash(python3 /tmp/docker_build_and_status.py)",
      "Bash(/usr/bin/python3 /tmp/docker_build_and_status.py)",
      "Bash(/tmp/run_docker_script.sh)",
      "Bash(/Applications/Docker.app/Contents/Resources/bin/docker version)",
      "Bash(/tmp/run_docker_setup.sh:*)",
      "Bash(/tmp/docker_setup_clean.sh)",
      "Bash(DOCKER=\"/Applications/Docker.app/Contents/Resources/bin/docker\")",
      "Bash(DOCKER=/Applications/Docker.app/Contents/Resources/bin/docker)",
      "Bash(echo $SHELL)",
      "Bash(/dev/null)",
      "Bash(for i in {1..60})",
      "Bash(do:*)",
      "Bash(break)",
      "Bash(/Applications/Docker.app/Contents/Resources/bin/docker ps -a)",
      "Bash(/Applications/Docker.app/Contents/Resources/bin/docker rm -f jolly_ritchie happy_wescoff)",
      "Bash(sh:*)",
      "Bash(/bin/bash -c \"cd ''/Volumes/T7 Shield/Projects/SpiralogicOracleSystem'' && docker compose -f docker-compose.dev.yml up --build\")",
      "WebFetch(domain:localhost)",
      "Bash(./scripts/fresh-rebuild.sh:*)",
      "Bash(/bin/bash:*)",
      "Bash(npx:*)",
      "Bash(echo $PWD)",
      "Bash(tsc:*)",
      "Bash(\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/run_build.sh\")",
      "Bash(./run-build.sh)",
      "Bash(git --version)",
      "Bash(git fsck:*)",
      "Bash(git -C \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" fsck --full)",
      "Bash(git -C /Volumes/T7 Shield/Projects/SpiralogicOracleSystem status)",
      "Bash(/tmp/fix_git.sh:*)",
      "Bash(git clone:*)",
      "Bash(git switch:*)",
      "Bash(defaults write:*)",
      "Bash(sudo mdutil:*)",
      "Bash(echo $HOME)",
      "Bash(git rev-parse:*)",
      "Bash(npm version:*)",
      "Bash(WORKING_DIR=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\")",
      "Bash(npm --prefix \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" run doctor)",
      "Bash(./node_modules/.bin/depcruise:*)",
      "Bash(env -i /bin/bash -c 'cd \"\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\"\" && pwd')",
      "Bash(/bin/sh:*)",
      "Bash(--exclude 'node_modules' --exclude '.next' )",
      "Bash(\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/\" )",
      "Bash(\"$HOME/spiralogic_oracle/\")",
      "Bash(env -i /bin/bash -c:*)",
      "Bash(echo \"Working from: $PWD\")",
      "Bash(COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_BUILDKIT=0 docker compose -f docker-compose.yml build --no-cache)",
      "Bash(git grep:*)",
      "Bash(HUSKY=0 git add .github/workflows/mindmap-pages.yml .gitignore .secretlintrc.json)",
      "Bash(npm config delete:*)",
      "Bash(brew unlink:*)",
      "Bash(hash -r)",
      "Bash(~/bin/node-doctor.sh:*)",
      "Bash(supabase db:*)",
      "Bash(supabase projects:*)",
      "Bash(supabase link:*)",
      "Bash(supabase migration:*)",
      "Bash(brew:*)",
      "Bash(brew upgrade:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}