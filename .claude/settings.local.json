{
  "permissions": {
    "allow": [
      "Bash(npx tsc:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(grep:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git filter-branch:*)",
      "Bash(git stash:*)",
      "Bash(git filter-repo:*)",
      "Bash(git remote add:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(timeout 5 npm run start:minimal)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(ls:*)",
      "Bash(timeout:*)",
      "Bash(node:*)",
      "Bash(npm run dev:*)",
      "Bash(cat:*)",
      "Bash(cp:*)",
      "Bash(true)",
      "Bash(git ls-tree:*)",
      "Bash(mv:*)",
      "Bash(npx vercel:*)",
      "WebFetch(domain:frontend-asklr7br2-spiralogic-oracle-system.vercel.app)",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(npm run lint)",
      "Bash(npx ts-node:*)",
      "Bash(chmod:*)",
      "Bash(curl:*)",
      "Bash(npx tsx:*)",
      "Bash(NODE_ENV=test VITE_SUPABASE_URL=test VITE_SUPABASE_ANON_KEY=test npx ts-node --esm src/tests/test-oracle-modes.ts)",
      "Bash(npm start)",
      "Bash(kill:*)",
      "Bash(vercel:*)",
      "Bash(rg:*)",
      "Bash(npm audit:*)",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"Sacred Technology Interface|Sacred Technology Platform|Sacred Tech\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -B2 -A2 \"Sacred Technology Platform\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -B3 -A3 \"Soullab Sacred Technology\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"#FFD700|#FFC107|#FFB300|#FFCA28|#FFEB3B|#FDD835\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"rgb\\(255,\\s*215,\\s*0\\)|rgba\\(255,\\s*215,\\s*0\\)\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"sacred-gold|#c9b037\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"yellow-[3-5]00|amber-[3-5]00|gold\" --include=\"*.tsx\" --include=\"*.jsx\" --include=\"*.ts\" --include=\"*.js\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"yellow-[3-5]00|amber-[3-5]00\" -g \"*.tsx\" -g \"*.jsx\" -g \"*.ts\" -g \"*.js\")",
      "Bash(/Users/andreanezat/.nvm/versions/node/v20.19.2/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"#d4af37|divine-gold|sacred-amber\" -g \"*.tsx\" -g \"*.jsx\" -g \"*.ts\" -g \"*.js\" -g \"*.css\")",
      "Bash(tsc --build)",
      "Bash(npm run start:prod:*)",
      "Bash(brew list:*)",
      "Bash(brew install:*)",
      "Bash(python3.11:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(npm cache clean:*)",
      "Bash(export:*)",
      "Bash(gtimeout:*)",
      "Bash(npm view:*)",
      "mcp__ide__getDiagnostics",
      "Bash(npm update)",
      "Bash(npm uninstall:*)",
      "Bash(git tag:*)",
      "Bash(npm test:*)",
      "Bash(pkill:*)",
      "Bash(./setup-domains.sh:*)",
      "Bash(sudo killall:*)",
      "Bash(dig:*)",
      "Bash(./check-deployment.sh)",
      "Bash(npx next-auth:*)",
      "Bash(openssl rand:*)",
      "Bash(npm run voice:test:matrix:*)",
      "Bash(npm run voice:setup:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(TEST_FALLBACK=true npm run voice:test:matrix)",
      "Bash(pip uninstall:*)",
      "Bash(npm run voice:play:*)",
      "Bash(afplay:*)",
      "Bash(npm run:*)",
      "Bash(TEST_FALLBACK=true node testMayaActivation.js)",
      "Bash(npx jest:*)",
      "Bash(git checkout:*)",
      "mcp__ide__executeCode",
      "Bash(git -C \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" status)",
      "Bash(git --git-dir=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/.git\" --work-tree=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" status)",
      "Bash(REPO_PATH=\"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\")",
      "Bash(exec zsh)",
      "Bash(bash -c 'cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" && git status --porcelain')",
      "Bash(env -i bash -c 'cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" && /usr/bin/git status')",
      "Bash(unset ZDOTDIR)",
      "Bash(/bin/bash -l -c 'cd \"/Volumes/T7 Shield/Projects/SpiralogicOracleSystem\" && git status')",
      "WebFetch(domain:spiralogic-oracle-system.vercel.app)",
      "WebFetch(domain:soullab.life)",
      "Bash(npm i:*)",
      "Bash(pip3 install:*)",
      "Bash(pipx install:*)",
      "Bash(cd:*)",
      "Bash(npm --version)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(NODE_ENV=production npm run build)",
      "Bash(git init:*)",
      "Bash(git subtree push:*)",
      "Bash(git gc:*)",
      "Bash(git subtree split:*)",
      "Bash(claude doctor)",
      "Bash(git config:*)",
      "Bash(git pull:*)",
      "Bash(docker system prune:*)",
      "Bash(docker volume prune:*)",
      "Bash(sudo du:*)",
      "Bash(~/cleanup_mac.sh)",
      "Bash(sudo pkill:*)",
      "Bash(open:*)",
      "Bash(docker:*)",
      "Bash(sed:*)",
      "Bash(xattr:*)",
      "Bash(git reset:*)",
      "Bash(npx depcheck:*)",
      "Bash(npx eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(git branch:*)",
      "Bash(npm -w backend run clean)",
      "Bash(npm -w backend run build)",
      "Bash(npm -w backend test -- -i)",
      "Bash(npx husky init:*)",
      "Bash(npx husky:*)",
      "Bash(bash:*)",
      "Bash(npm ls:*)",
      "Bash(npm remove:*)",
      "Bash(PORT=3002 PSI_LITE_ENABLED=true PSI_LEARNING_ENABLED=true PSI_LEARNING_RATE=0.08 PSI_MEMORY_ENABLED=true npm start)",
      "Bash(npx next build:*)",
      "Bash(cd:*)",
      "Bash(PORT=3001 npm start)",
      "Bash(make:*)",
      "WebFetch(domain:supabase.com)",
      "Bash(./test-maya.sh:*)",
      "Bash(./test-maya-async.sh:*)",
      "Bash(./test-maya-sync.sh:*)",
      "Bash(./test-both-endpoints.sh:*)",
      "Bash(./warmup-runpod.sh:*)",
      "Bash(ssh:*)",
      "Bash(npm --prefix backend run build:all)",
      "Bash(security delete-generic-password:*)",
      "Bash(npx create-next-app@latest:*)",
      "Bash(./build_and_push.sh)",
      "Bash(colima start:*)",
      "Bash(echo)",
      "Bash(PORT=3002 npx ts-node src/server.ts)",
      "Bash(APP_PORT=3002 npx ts-node src/server-minimal.ts)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/backend/quick-test-endpoints.sh)",
      "Bash(PORT=3002 node --version)",
      "Bash(cd:*)",
      "Bash(unset PORT)",
      "Bash(cd:*)",
      "Bash(NODE_OPTIONS=\"--unhandled-rejections=strict --trace-uncaught\" npx tsx src/server-minimal.ts)",
      "Bash(SAFE_MODE=1 NODE_ENV=development npx ts-node --transpile-only -r tsconfig-paths/register src/server-minimal.ts)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(printenv)",
      "Bash(./test-streaming.sh:*)",
      "Bash(APP_PORT=3002 npm run start:minimal)",
      "Bash(APP_PORT=3002 node src/server-minimal.js)",
      "Bash(APP_PORT=3002 ./start-backend.sh)",
      "Bash(./start-backend.sh:*)",
      "Bash(./maya-quick-start.sh)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(./scripts/verify-production.sh:*)",
      "Bash(/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/scripts/quick-test.sh:*)",
      "Bash(APP_PORT=3002 ./maya-quick-start.sh)",
      "Bash(./scripts/check-keys.sh:*)",
      "Bash(./scripts/quick-test.sh:*)",
      "Bash(test:*)",
      "Bash(perl:*)",
      "Bash(./fix-test-endpoints.sh:*)",
      "Bash(./fix-remaining-tests.sh:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(./scripts/test-sesame.sh:*)",
      "Bash(./scripts/check-hf-api.sh:*)",
      "WebFetch(domain:huggingface.co)",
      "Bash(./scripts/test-sesame-debug.sh:*)",
      "Bash(./scripts/test-sesame-alternatives.sh:*)",
      "Bash(./scripts/test-huggingface-api.sh:*)",
      "Bash(./scripts/setup-sesame.sh:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(./scripts/test-hf-basic.sh:*)",
      "Bash(cd:*)",
      "Bash(./scripts/test-sesame-audio.sh:*)",
      "Bash(cd:*)",
      "Bash(git clone:*)",
      "Bash(git clone:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(./backend/scripts/start-beta.sh:*)",
      "Bash(./setup-sesame-csm.sh:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(./scripts/fix-types.sh:*)",
      "Bash(./scripts/setup-sesame-offline.sh:*)",
      "Bash(./scripts/run-beta-tests.sh:*)",
      "Bash(cd:*)",
      "Bash(./scripts/test-sesame-health.sh:*)",
      "Bash(./backend/scripts/fix-docker-context.sh:*)",
      "Bash(./scripts/start-mock-sesame.sh:*)",
      "Bash(./backend/scripts/start-beta.sh:*)",
      "Bash(./check-docker.sh)",
      "Bash(./backend/scripts/clean-docker-build.sh:*)",
      "Bash(COPYFILE_DISABLE=1 docker build -t sesame-csm-local .)",
      "Bash(./backend/scripts/start-mock-sesame.sh:*)",
      "Bash(claude code --help)",
      "Bash([ -f .env ])",
      "Bash([ -d node_modules ])",
      "Bash([ -d dist ])",
      "Bash(cursor:*)",
      "Bash(/dev/null)",
      "Bash(./scripts/start-beta-bulletproof.sh:*)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Bash(code:*)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_W5U42N/**)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_TxsjSF/**)",
      "Read(/Users/andreanezat/Desktop/**)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_LyYkag/**)",
      "Read(/Users/andreanezat/Desktop/**)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_HF44XQ/**)",
      "Read(/Users/andreanezat/Desktop/**)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_ekedcu/**)",
      "Read(/Users/andreanezat/Desktop/**)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_PatWla/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_ITn24q/**)",
      "Read(/Users/andreanezat/Desktop/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Bash(PORT=3002 npm start)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(PORT=3001 npm run dev)",
      "Bash(fuser:*)",
      "Bash(cd:*)",
      "Read(/var/folders/4f/cd3c1bys0m1f_87221z0vjgh0000gn/T/TemporaryItems/NSIRD_screencaptureui_m28Bw8/**)",
      "Bash(PORT=3002 npm run dev)",
      "Bash(./test-maya-connection.sh:*)",
      "Read(/Volumes/**)",
      "Bash(cd:*)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Bash(./start-sesame.sh:*)",
      "Read(/Volumes/**)",
      "Read(//**)",
      "Bash(PORT=3004 npm run dev)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Read(/Volumes/**)",
      "Bash(sesame-csm:latest)",
      "Bash(PORT=3003 npm run dev)",
      "Bash(cd:*)",
      "Bash(colima list:*)",
      "Bash(./venv-sesame-ci/bin/python:*)",
      "Bash(cd:*)",
      "Bash(/opt/homebrew/opt/python@3.13/bin/python3.13:*)",
      "Bash(venv/bin/python3.13:*)",
      "Bash(/opt/homebrew/bin/python3:*)",
      "Bash(./sesame-env/bin/pip install fastapi uvicorn pydantic)",
      "Bash(./sesame-env/bin/python:*)",
      "Bash(/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/backend/backend/sesame-env/bin/python sesame-local.py)",
      "Bash(./scripts/sesame_stress_test.sh:*)",
      "Bash(/Volumes/T7\\ Shield/Projects/SpiralogicOracleSystem/backend/scripts/sesame_stress_test.sh:*)",
      "Bash(/Volumes/T7\\ Shield/Projects/SpiralogicOracleSystem/scripts/fix-database-storage.sh:*)",
      "WebFetch(domain:jkbetmadzcpoinjogkli.supabase.co)",
      "Bash(claude --version)",
      "Bash(cd:*)",
      "Bash(PORT=3002 npm run start:minimal)",
      "Bash(PORT=3002 npx tsx src/server-minimal.ts)",
      "Bash(./scripts/verify-beta.sh:*)",
      "Bash(./scripts/beta-lint-cleanup.sh:*)",
      "Bash(./fix-quotes.sh:*)",
      "Bash(npx next lint:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(do echo \"Processing $file\")",
      "Bash(./scripts/setup-git-aliases.sh:*)",
      "Bash(git st:*)",
      "Bash(./scripts/safe-commit.sh:*)",
      "Bash(git submodule:*)",
      "Bash(npm update:*)",
      "Bash(./scripts/security-patch.sh:*)",
      "Bash(whois:*)",
      "Bash(npm ci:*)",
      "Bash(./scripts/vercel-migration-stubs.sh:*)",
      "Bash(git fetch:*)",
      "Bash(./fix-loggers.sh:*)",
      "Bash(./fix-all-collective-imports.sh:*)",
      "Bash(/Volumes/T7 Shield/Projects/SpiralogicOracleSystem/fix-all-stubs.sh)",
      "Bash(do sed -i '' '/const logger: Logger = {/,/};/ { /info:/! { s/debug: .*/&\\n    info: (msg: any, meta?: any) => console.info(`[Logger] ${msg}`, meta),/; } }' \"$file\")",
      "WebFetch(domain:vercel.com)",
      "WebSearch",
      "Bash(git log:*)",
      "Bash(git mv:*)",
      "Bash(./scripts/verify-deployment.sh:*)",
<<<<<<< HEAD
      "Bash(./scripts/deploy-vercel.sh:*)",
      "Bash(./emergency-deploy.sh)",
      "Bash(echo:*)",
      "Bash(git clean:*)",
      "Bash(git remote set-url:*)"
=======
      "Bash(./scripts/deploy-vercel.sh:*)"
>>>>>>> f172a101063c5c79f1c63145b7c12589cf89ae26
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}