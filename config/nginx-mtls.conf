# NGINX mTLS Configuration for Spiralogic Oracle System
# Level 5 DevSecOps - Mutual TLS and security hardening

# Main configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Performance and security
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'self'; manifest-src 'self';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Hide nginx version
    server_tokens off;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'ssl_protocol="$ssl_protocol" ssl_cipher="$ssl_cipher" '
                    'client_cert_s_dn="$ssl_client_s_dn" '
                    'client_cert_verify="$ssl_client_verify"';

    access_log /var/log/nginx/access.log main;

    # SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # SSL session cache
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # DH parameters for perfect forward secrecy
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # Client certificate verification
    ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
    ssl_verify_client on;
    ssl_verify_depth 2;

    # Default server (deny all)
    server {
        listen 80 default_server;
        listen 443 ssl http2 default_server;
        server_name _;

        ssl_certificate /etc/ssl/certs/default.crt;
        ssl_certificate_key /etc/ssl/private/default.key;

        return 444;
    }

    # Spiralogic Oracle Main Server
    server {
        listen 443 ssl http2;
        server_name oracle.spiralogic.network;

        # SSL certificates
        ssl_certificate /etc/ssl/certs/spiralogic-oracle.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-oracle.key;

        # mTLS configuration
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;
        ssl_verify_depth 2;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn perip 10;
        limit_conn perserver 100;

        # Security headers for Oracle
        add_header X-Spiralogic-Instance "oracle" always;
        add_header X-Client-Cert-Verify $ssl_client_verify always;
        add_header X-Client-Cert-Subject $ssl_client_s_dn always;

        # Root location
        location / {
            proxy_pass http://spiralogic-oracle:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Client-Cert-Verify $ssl_client_verify;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
            proxy_set_header X-Client-Cert-Issuer $ssl_client_i_dn;
            proxy_set_header X-Client-Cert-Serial $ssl_client_serial;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # API endpoints with stricter rate limiting
        location /api/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://spiralogic-oracle:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Client-Cert-Verify $ssl_client_verify;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
        }

        # Authentication endpoints
        location /auth/ {
            limit_req zone=auth burst=5 nodelay;

            proxy_pass http://spiralogic-oracle:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Client-Cert-Verify $ssl_client_verify;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
        }

        # Health check endpoint (no client cert required)
        location /health {
            ssl_verify_client optional;

            proxy_pass http://spiralogic-oracle:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Metrics endpoint (internal only)
        location /metrics {
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            ssl_verify_client optional;

            proxy_pass http://spiralogic-oracle:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Elemental Agents (gRPC with mTLS)
    server {
        listen 7001 ssl http2;
        server_name fire-agent.spiralogic.network;

        ssl_certificate /etc/ssl/certs/spiralogic-fire-agent.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-fire-agent.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        location / {
            grpc_pass grpc://spiralogic-fire-agent:7001;
            grpc_set_header X-Client-Cert-Verify $ssl_client_verify;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;

            # Error pages for gRPC
            error_page 502 = /error502grpc;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "Service temporarily unavailable";
            return 204;
        }
    }

    server {
        listen 7002 ssl http2;
        server_name water-agent.spiralogic.network;

        ssl_certificate /etc/ssl/certs/spiralogic-water-agent.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-water-agent.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        location / {
            grpc_pass grpc://spiralogic-water-agent:7002;
            grpc_set_header X-Client-Cert-Verify $ssl_client_verify;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;

            error_page 502 = /error502grpc;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "Service temporarily unavailable";
            return 204;
        }
    }

    server {
        listen 7003 ssl http2;
        server_name earth-agent.spiralogic.network;

        ssl_certificate /etc/ssl/certs/spiralogic-earth-agent.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-earth-agent.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        location / {
            grpc_pass grpc://spiralogic-earth-agent:7003;
            grpc_set_header X-Client-Cert-Verify $ssl_client_verify;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;

            error_page 502 = /error502grpc;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "Service temporarily unavailable";
            return 204;
        }
    }

    server {
        listen 7004 ssl http2;
        server_name air-agent.spiralogic.network;

        ssl_certificate /etc/ssl/certs/spiralogic-air-agent.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-air-agent.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        location / {
            grpc_pass grpc://spiralogic-air-agent:7004;
            grpc_set_header X-Client-Cert-Verify $ssl_client_verify;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;

            error_page 502 = /error502grpc;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "Service temporarily unavailable";
            return 204;
        }
    }

    server {
        listen 7005 ssl http2;
        server_name aether-agent.spiralogic.network;

        ssl_certificate /etc/ssl/certs/spiralogic-aether-agent.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-aether-agent.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        location / {
            grpc_pass grpc://spiralogic-aether-agent:7005;
            grpc_set_header X-Client-Cert-Verify $ssl_client_verify;
            grpc_set_header X-Client-Cert-Subject $ssl_client_s_dn;

            error_page 502 = /error502grpc;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "Service temporarily unavailable";
            return 204;
        }
    }

    # Monitoring endpoints (internal network only)
    server {
        listen 9090 ssl http2;
        server_name prometheus.spiralogic.internal;

        ssl_certificate /etc/ssl/certs/spiralogic-monitoring.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-monitoring.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        # Restrict to internal networks
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        location / {
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 3000 ssl http2;
        server_name grafana.spiralogic.internal;

        ssl_certificate /etc/ssl/certs/spiralogic-monitoring.crt;
        ssl_certificate_key /etc/ssl/private/spiralogic-monitoring.key;
        ssl_client_certificate /etc/ssl/certs/spiralogic-ca.crt;
        ssl_verify_client on;

        # Restrict to internal networks
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        location / {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support for live updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name oracle.spiralogic.network *.spiralogic.network;

        return 301 https://$server_name$request_uri;
    }
}