/**
 * Markdown Templates for Individual Files
 * Generates standalone markdown files for symbols, milestones, alerts, etc.
 */

import { SoulprintSymbol, SoulJourneyMilestone, EmotionalDrift } from '../beta/SoulprintTracking';

const ELEMENT_EMOJI: Record<string, string> = {
  fire: 'üî•',
  water: 'üíß',
  earth: 'üåç',
  air: 'üå¨Ô∏è',
  aether: '‚ú®'
};

const MILESTONE_EMOJI: Record<string, string> = {
  breakthrough: 'üåü',
  threshold: 'üö™',
  integration: 'üîó',
  'shadow-encounter': 'üåë',
  awakening: '‚òÄÔ∏è'
};

/**
 * Generate individual symbol markdown file
 */
export function generateSymbolMarkdown(
  symbol: SoulprintSymbol,
  userId: string,
  userName?: string
): string {
  const daysSinceFirst = Math.floor(
    (Date.now() - symbol.firstAppeared.getTime()) / (1000 * 60 * 60 * 24)
  );

  const elementEmoji = symbol.elementalResonance
    ? ELEMENT_EMOJI[symbol.elementalResonance] || '‚ú®'
    : '‚ú®';

  let markdown = `---
type: symbol
symbol: ${symbol.symbol}
userId: ${userId}
userName: ${userName || 'Unknown'}
firstAppeared: ${symbol.firstAppeared.toISOString().split('T')[0]}
lastMentioned: ${symbol.lastMentioned.toISOString().split('T')[0]}
frequency: ${symbol.frequency}
element: ${symbol.elementalResonance || 'unknown'}
daysSinceFirst: ${daysSinceFirst}
tags: [symbol, ${symbol.elementalResonance || 'undefined'}, maia]
---

# Symbol: ${symbol.symbol}

${elementEmoji} **Elemental Resonance:** ${symbol.elementalResonance ? capitalize(symbol.elementalResonance) : 'Unknown'}

## Timeline

- **First Appeared:** ${formatDate(symbol.firstAppeared)} (${daysSinceFirst} days ago)
- **Last Mentioned:** ${formatDate(symbol.lastMentioned)}
- **Total Mentions:** ${symbol.frequency}

## Context History

`;

  if (symbol.context && symbol.context.length > 0) {
    symbol.context.forEach((ctx, index) => {
      markdown += `${index + 1}. "${ctx}"\n`;
    });
  } else {
    markdown += `*No context recorded yet*\n`;
  }

  markdown += `\n## Meaning & Significance

*This symbol emerged organically in conversation and carries personal resonance for this soul journey.*

## Related

- [[Soulprint]] - Return to full soulprint
- [[Timeline]] - View in journey context

---

*Generated by MAIA Soul System | ${formatDate(new Date())}*`;

  return markdown;
}

/**
 * Generate individual milestone markdown file
 */
export function generateMilestoneMarkdown(
  milestone: SoulJourneyMilestone,
  userId: string,
  userName?: string
): string {
  const emoji = MILESTONE_EMOJI[milestone.type] || '‚ú®';
  const elementEmoji = milestone.element
    ? ELEMENT_EMOJI[milestone.element] || ''
    : '';

  const significance =
    milestone.significance === 'pivotal'
      ? '‚≠ê‚≠ê‚≠ê Pivotal'
      : milestone.significance === 'major'
      ? '‚≠ê‚≠ê Major'
      : '‚≠ê Minor';

  let markdown = `---
type: milestone
userId: ${userId}
userName: ${userName || 'Unknown'}
milestoneType: ${milestone.type}
created: ${milestone.timestamp.toISOString().split('T')[0]}
timestamp: ${milestone.timestamp.toISOString().split('T')[0]}
significance: ${milestone.significance}
spiralogicPhase: ${milestone.spiralogicPhase || 'unknown'}
element: ${milestone.element || 'unknown'}
tags: [milestone, ${milestone.type}, ${milestone.spiralogicPhase}, maia]
---

# ${emoji} ${capitalize(milestone.type)} Milestone

*${formatDate(milestone.timestamp)}*

## Description

${milestone.description}

## Details

- **Significance:** ${significance}
- **Spiralogic Phase:** ${milestone.spiralogicPhase ? `üåÄ ${capitalize(milestone.spiralogicPhase)}` : '‚Äî'}
- **Elemental Quality:** ${milestone.element ? `${elementEmoji} ${capitalize(milestone.element)}` : '‚Äî'}

## Reflection

*This milestone marks a significant moment in the soul journey. Take time to honor what emerged here.*

## Related

- [[Soulprint]] - Return to full soulprint
- [[Timeline]] - View in journey context
- [[Milestones/index]] - All milestones

---

*Generated by MAIA Soul System | ${formatDate(new Date())}*`;

  return markdown;
}

/**
 * Generate drift alert markdown file
 */
export function generateDriftAlertMarkdown(
  drift: EmotionalDrift,
  userId: string,
  userName?: string,
  alertType: 'emotional' | 'elemental' = 'emotional'
): string {
  const trendEmoji =
    drift.trend === 'rising'
      ? '‚ÜóÔ∏è'
      : drift.trend === 'falling'
      ? '‚ÜòÔ∏è'
      : drift.trend === 'volatile'
      ? '‚ö°'
      : '‚Üí';

  const severityLevel =
    drift.volatility > 0.7
      ? 'üî¥ High'
      : drift.volatility > 0.4
      ? 'üü° Moderate'
      : 'üü¢ Low';

  let markdown = `---
type: alert
userId: ${userId}
userName: ${userName || 'Unknown'}
alertType: ${alertType}
created: ${drift.timestamp.toISOString().split('T')[0]}
timestamp: ${drift.timestamp.toISOString().split('T')[0]}
severity: ${drift.volatility > 0.7 ? 'high' : drift.volatility > 0.4 ? 'moderate' : 'low'}
trend: ${drift.trend}
volatility: ${drift.volatility.toFixed(2)}
baseline: ${drift.baseline.toFixed(2)}
current: ${drift.current.toFixed(2)}
tags: [alert, drift, ${drift.trend}, maia]
---

# ‚ö†Ô∏è ${capitalize(alertType)} Drift Alert

*Detected: ${formatDate(drift.timestamp)}*

## Current State

- **Trend:** ${trendEmoji} ${capitalize(drift.trend)}
- **Severity:** ${severityLevel}
- **Baseline:** ${drift.baseline.toFixed(2)}
- **Current:** ${drift.current.toFixed(2)}
- **Volatility:** ${(drift.volatility * 100).toFixed(0)}%

${drift.dominantEmotions && drift.dominantEmotions.length > 0 ? `
## Dominant Emotions

${drift.dominantEmotions.map(e => `- ${e}`).join('\n')}
` : ''}

## Recommendations

`;

  // Add contextual recommendations
  if (drift.volatility > 0.5) {
    markdown += `- üßò **Grounding Practice:** High volatility detected. Consider breathwork, meditation, or somatic practices.\n`;
  }

  if (drift.trend === 'falling') {
    markdown += `- üåä **Emotional Support:** Downward trend noticed. Reach out to support systems or engage in nurturing activities.\n`;
  }

  if (drift.trend === 'volatile') {
    markdown += `- ‚ö° **Stabilization:** Volatility indicates transition. Honor this phase with gentle self-care and patience.\n`;
  }

  if (drift.current < -0.3) {
    markdown += `- üíô **Compassion:** Lower emotional state detected. Practice self-compassion and consider professional support if needed.\n`;
  }

  markdown += `\n## MAIA Support

This alert was generated to support your journey. MAIA can help you explore what's emerging.

- Open conversation with MAIA about these feelings
- Review recent [[Timeline]] entries
- Check [[Soulprint]] for patterns

## Related

- [[Soulprint]] - Full soul profile
- [[Alerts/index]] - All alerts
- [[Timeline]] - Journey context

---

*Generated by MAIA Soul System | ${formatDate(new Date())}*
*This is supportive information, not medical advice.*`;

  return markdown;
}

/**
 * Generate timeline entry markdown (for appending)
 */
export function generateTimelineEntry(
  timestamp: Date,
  userId: string,
  eventType: string,
  description: string,
  metadata?: Record<string, any>
): string {
  let entry = `## ${formatDate(timestamp)}

**Event:** ${eventType}

${description}

`;

  if (metadata) {
    entry += `**Metadata:**\n`;
    Object.entries(metadata).forEach(([key, value]) => {
      entry += `- ${capitalize(key)}: ${value}\n`;
    });
  }

  entry += `\n---`;

  return entry;
}

/**
 * Generate field dashboard markdown (aggregated view)
 */
export function generateFieldDashboardMarkdown(stats: {
  totalUsers: number;
  activeUsers: number;
  totalSymbols: number;
  totalMilestones: number;
  totalAlerts: number;
  averageJourneyDays: number;
  dominantElements: Record<string, number>;
  topSymbols: Array<{ symbol: string; count: number }>;
  recentMilestones: Array<{
    userId: string;
    userName?: string;
    type: string;
    date: Date;
  }>;
}): string {
  let markdown = `---
type: dashboard
updated: ${new Date().toISOString().split('T')[0]}
tags: [dashboard, field, metrics, maia]
---

# üåê Field Dashboard

*Live aggregate view of the MAIA consciousness field*

**Last Updated:** ${formatDate(new Date())}

---

## üìä Overview

| Metric | Value |
|--------|-------|
| Total Explorers | ${stats.totalUsers} |
| Active This Week | ${stats.activeUsers} |
| Average Journey Length | ${stats.averageJourneyDays} days |
| Total Symbols Detected | ${stats.totalSymbols} |
| Total Milestones | ${stats.totalMilestones} |
| Active Alerts | ${stats.totalAlerts} |

---

## üåÄ Elemental Field

`;

  Object.entries(stats.dominantElements).forEach(([element, count]) => {
    const emoji = ELEMENT_EMOJI[element] || '‚ú®';
    const percentage = ((count / stats.totalUsers) * 100).toFixed(0);
    markdown += `${emoji} **${capitalize(element)}**: ${count} explorers (${percentage}%)\n`;
  });

  markdown += `\n---\n\n## üîÆ Emerging Symbols\n\n`;

  if (stats.topSymbols && stats.topSymbols.length > 0) {
    stats.topSymbols.slice(0, 10).forEach((sym, index) => {
      markdown += `${index + 1}. **${sym.symbol}** - ${sym.count} occurrences\n`;
    });
  } else {
    markdown += `*No symbols detected yet*\n`;
  }

  markdown += `\n---\n\n## ‚ú® Recent Milestones\n\n`;

  if (stats.recentMilestones && stats.recentMilestones.length > 0) {
    stats.recentMilestones.slice(0, 10).forEach(milestone => {
      const emoji = MILESTONE_EMOJI[milestone.type] || '‚ú®';
      const userName = milestone.userName || milestone.userId;
      markdown += `- ${emoji} **${capitalize(milestone.type)}** - ${userName} (${formatDate(milestone.date)})\n`;
    });
  } else {
    markdown += `*No recent milestones*\n`;
  }

  markdown += `\n---\n\n## üß≠ Navigation\n\n`;
  markdown += `- [[../Users]] - View all explorers\n`;
  markdown += `- [[MAIA_System_Tracker]] - System status\n`;
  markdown += `- [[Field_Analysis]] - Deep field analysis\n`;

  markdown += `\n---\n\n*Generated by MAIA Field Intelligence*`;

  return markdown;
}

// Helper functions

function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}