#!/bin/bash

# Badge Constellation Graduation Ceremony Canary Tests
echo "üåü Badge Constellation Graduation Ceremony Canary Tests"
echo "======================================================="

BASE_URL="http://localhost:3000"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

function test_endpoint() {
    local name="$1"
    local url="$2" 
    local method="$3"
    local data="$4"
    local expected_field="$5"
    local auth_required="$6"
    
    echo -e "\n${BLUE}Testing: $name${NC}"
    
    # Add auth headers if required
    auth_headers=""
    if [ "$auth_required" = "true" ]; then
        echo "‚ö†Ô∏è  This test requires authentication"
        auth_headers="-H 'Authorization: Bearer fake_test_token'"
    fi
    
    if [ "$method" = "GET" ]; then
        if [ -n "$auth_headers" ]; then
            response=$(curl -s $auth_headers "$url")
        else
            response=$(curl -s "$url")
        fi
    else
        echo "Data: $data"
        if [ -n "$auth_headers" ]; then
            response=$(curl -s -X "$method" "$url" \
                $auth_headers \
                -H 'Content-Type: application/json' \
                -d "$data")
        else
            response=$(curl -s -X "$method" "$url" \
                -H 'Content-Type: application/json' \
                -d "$data")
        fi
    fi
    
    if [ $? -eq 0 ]; then
        if echo "$response" | jq -e "$expected_field" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úì PASS${NC} - $expected_field found"
            if [ "$expected_field" != ".ok" ] && [ "$expected_field" != ".status" ] && [ "$expected_field" != ".eligible" ]; then
                echo "$response" | jq "$expected_field" 2>/dev/null || echo "Response preview: $(echo "$response" | head -c 200)..."
            fi
        else
            echo -e "${RED}‚úó FAIL${NC} - $expected_field not found"
            echo "Response: $response"
        fi
    else
        echo -e "${RED}‚úó FAIL${NC} - Request failed"
    fi
}

echo -e "\n${PURPLE}=== Phase 1: Database Migration Verification ===${NC}"
echo -e "${BLUE}Checking if constellation tables exist (manual verification needed):${NC}"
echo "1. Check Supabase console for these tables:"
echo "   ‚Ä¢ badge_constellations"
echo "   ‚Ä¢ badge_ceremonies" 
echo "   ‚Ä¢ beta_badges_catalog (should include GRADUATED_PIONEER)"
echo "2. Verify views exist:"
echo "   ‚Ä¢ v_recent_ceremonies"
echo "3. Verify constellation data is seeded:"
echo "   ‚Ä¢ WAYFINDER, WEAVER, PIONEER constellations"

echo -e "\n${PURPLE}=== Phase 2: Constellation Preview API ===${NC}"
test_endpoint "Constellation Preview (unauthenticated)" \
    "$BASE_URL/api/beta/constellation/preview" \
    "GET" \
    "" \
    ".error" \
    "false"

test_endpoint "Constellation Preview (requires auth)" \
    "$BASE_URL/api/beta/constellation/preview" \
    "GET" \
    "" \
    ".eligible" \
    "true"

echo -e "\n${PURPLE}=== Phase 3: Ceremony Commit (Start) ===${NC}"
test_endpoint "Ceremony Commit (requires auth)" \
    "$BASE_URL/api/beta/constellation/commit" \
    "POST" \
    '{}' \
    ".ceremony_id" \
    "true"

echo -e "\n${PURPLE}=== Phase 4: Ceremony Complete ===${NC}"
test_endpoint "Ceremony Complete (requires ceremony_id)" \
    "$BASE_URL/api/beta/constellation/complete" \
    "POST" \
    '{"ceremonyId":"test-ceremony-id"}' \
    ".error" \
    "true"

echo -e "\n${PURPLE}=== Phase 5: UI Accessibility Tests ===${NC}"
echo -e "${BLUE}Manual UI Tests:${NC}"
echo "1. Visit: $BASE_URL/beta/graduation"
echo "   ‚Ä¢ Should show eligibility check or ceremony"
echo "   ‚Ä¢ Animation should honor prefers-reduced-motion"
echo "   ‚Ä¢ Skip button should appear in development mode"
echo ""
echo "2. Visit: $BASE_URL/beta/badges"
echo "   ‚Ä¢ Should show constellation card when ‚â•5 badges"
echo "   ‚Ä¢ Should show graduated status if GRADUATED_PIONEER badge present"
echo ""
echo "3. Visit: $BASE_URL/admin/badges"
echo "   ‚Ä¢ Should show ceremony statistics"
echo "   ‚Ä¢ Should display recent ceremonies table"

echo -e "\n${PURPLE}=== Phase 6: Environment Configuration ===${NC}"
echo -e "${BLUE}Environment Variables:${NC}"
ENV_VARS=("CEREMONY_ENABLED" "CEREMONY_MIN_BADGES" "NEXT_PUBLIC_CEREMONY_ANIM_MS" "NEXT_PUBLIC_CEREMONY_ALLOW_SKIP_IN_DEV")

for var in "${ENV_VARS[@]}"; do
    if grep -q "^${var}=" .env.local 2>/dev/null; then
        value=$(grep "^${var}=" .env.local | cut -d'=' -f2)
        if [ -n "$value" ]; then
            echo -e "${GREEN}‚úì${NC} $var is set: $value"
        else
            echo -e "${YELLOW}‚ö†${NC} $var is set but empty"
        fi
    else
        echo -e "${RED}‚úó${NC} $var is not set in .env.local"
    fi
done

echo -e "\n${PURPLE}=== Phase 7: Database Verification ===${NC}"
echo -e "${BLUE}Run these SQL queries in Supabase console:${NC}"
echo ""
echo "-- Check constellation definitions"
echo "SELECT code, name, description FROM badge_constellations ORDER BY code;"
echo ""
echo "-- Check for any ceremonies"
echo "SELECT constellation_code, status, COUNT(*) FROM badge_ceremonies GROUP BY constellation_code, status;"
echo ""
echo "-- Check GRADUATED_PIONEER badge"
echo "SELECT * FROM beta_badges_catalog WHERE badge_id = 'GRADUATED_PIONEER';"
echo ""
echo "-- Check recent ceremonies view"
echo "SELECT * FROM v_recent_ceremonies ORDER BY started_at DESC LIMIT 5;"

echo -e "\n${PURPLE}=== Phase 8: Integration Test Scenario ===${NC}"
echo -e "${BLUE}Complete Integration Test (requires auth and sufficient badges):${NC}"
echo ""
echo "1. Ensure test user has ‚â•5 badges including:"
echo "   ‚Ä¢ At least one exploration badge (PIONEER, VOICE_VOYAGER, PATHFINDER)"
echo "   ‚Ä¢ At least one depth badge (THREAD_WEAVER)"
echo "   ‚Ä¢ Either THREAD_WEAVER or PATTERN_SCOUT"
echo ""
echo "2. Test the full ceremony flow:"
echo "   a) Preview: GET /api/beta/constellation/preview"
echo "   b) Commit:  POST /api/beta/constellation/commit"
echo "   c) Complete: POST /api/beta/constellation/complete with ceremony_id"
echo ""
echo "3. Verify results:"
echo "   ‚Ä¢ badge_ceremonies table has new completed entry"
echo "   ‚Ä¢ beta_user_badges table has GRADUATED_PIONEER badge"
echo "   ‚Ä¢ beta_participants status = 'graduated'"

echo -e "\n${PURPLE}=== Expected Behaviors Summary ===${NC}"

echo -e "\n${GREEN}‚úì Constellation System Active:${NC}"
echo "‚Ä¢ Database tables and views created successfully"
echo "‚Ä¢ Constellation definitions seeded (WAYFINDER, WEAVER, PIONEER)"
echo "‚Ä¢ API endpoints handle eligibility checking"
echo "‚Ä¢ Ceremony creation and completion flows work"
echo "‚Ä¢ GRADUATED_PIONEER badge awarded on completion"

echo -e "\n${BLUE}üé≠ Ceremony Animation:${NC}"
echo "‚Ä¢ SVG constellation with Framer Motion animations"
echo "‚Ä¢ 20-30 second sequenced animation (title ‚Üí points ‚Üí links ‚Üí badges ‚Üí seal)"
echo "‚Ä¢ Accessibility: honors prefers-reduced-motion"
echo "‚Ä¢ Development: skip control available"
echo "‚Ä¢ Responsive design works on mobile and desktop"

echo -e "\n${YELLOW}üèÜ Graduation Flow:${NC}"
echo "‚Ä¢ Eligibility: ‚â•5 badges, exploration + depth categories, key badge present"
echo "‚Ä¢ Preview shows constellation and narration lines"
echo "‚Ä¢ Commit creates ceremony record and returns visual data"
echo "‚Ä¢ Complete awards GRADUATED_PIONEER and updates status"
echo "‚Ä¢ Idempotent completion (can call complete multiple times safely)"

echo -e "\n${BLUE}üîß Manual Verification Steps:${NC}"
echo "1. Run Supabase migration: 20250820140000_badge_constellation.sql"
echo "2. Seed test user with sufficient badges for graduation"
echo "3. Visit $BASE_URL/beta/graduation and complete ceremony"
echo "4. Verify GRADUATED_PIONEER badge appears in $BASE_URL/beta/badges"
echo "5. Check admin dashboard at $BASE_URL/admin/badges for ceremony stats"

echo -e "\n${YELLOW}üö® Troubleshooting Guide:${NC}"
echo "‚Ä¢ No constellation found? Ensure user has ‚â•5 badges with proper categories"
echo "‚Ä¢ Ceremony won't start? Check CEREMONY_ENABLED=true in environment"
echo "‚Ä¢ Animation not working? Verify Framer Motion is installed and imported"
echo "‚Ä¢ Database errors? Ensure migration applied and RLS policies are correct"
echo "‚Ä¢ API failures? Check authentication and badge requirements"

echo -e "\n${GREEN}üéä Constellation ceremony tests complete!${NC}"
echo "If all tests pass and manual verification succeeds:"
echo "‚Ä¢ Users can graduate through animated ceremony"
echo "‚Ä¢ Badge constellations form based on earned badges"
echo "‚Ä¢ Graduated Pioneer status is properly awarded"
echo "‚Ä¢ Admin dashboard shows ceremony analytics"

echo -e "\n${BLUE}Next Steps:${NC}"
echo "‚Ä¢ Deploy migration to production Supabase"
echo "‚Ä¢ Monitor ceremony completion rates and durations"
echo "‚Ä¢ Adjust constellation rules based on user patterns"
echo "‚Ä¢ Add more constellation types as system evolves"

echo -e "\n${PURPLE}üåü Ready for stellar graduation ceremonies! ‚ú®${NC}"