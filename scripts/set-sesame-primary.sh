#!/bin/bash

# Script to make Sesame CSM the primary voice engine
# with explicit fallback control and comprehensive logging

set -e

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üîÑ Converting to Sesame-Primary Voice System${NC}"
echo "=============================================="

# Check if we're in the right directory
if [ ! -f ".env.local" ] || [ ! -d "backend/src" ]; then
    echo -e "${RED}‚ùå Please run this script from the project root directory${NC}"
    echo "Expected files: .env.local, backend/src/"
    exit 1
fi

# Function to backup files
backup_file() {
    local file=$1
    if [ -f "$file" ]; then
        cp "$file" "$file.backup.$(date +%Y%m%d_%H%M%S)"
        echo -e "${YELLOW}üìÅ Backed up: $file${NC}"
    fi
}

echo -e "\n${YELLOW}üìÅ Creating backups...${NC}"
backup_file ".env.local"
backup_file "backend/src/services/SesameService.ts"
backup_file "backend/src/utils/voiceService.ts"
backup_file "app/api/oracle/chat/route.ts"

echo -e "\n${YELLOW}‚öôÔ∏è Updating environment configuration...${NC}"

# Update .env.local to prioritize Sesame
cat >> .env.local << 'EOF'

# ==============================================
# üé§ SESAME-PRIMARY VOICE CONFIGURATION
# ==============================================
# Voice engine priority (added by set-sesame-primary.sh)
VOICE_PRIMARY=sesame
VOICE_SECONDARY=elevenlabs
SESAME_ENABLED=true
SESAME_SELF_HOSTED=true
SESAME_SELF_HOSTED_URL=http://localhost:8000
SESAME_FALLBACK_ENABLED=false
SESAME_PRIMARY_MODE=true

# Voice routing settings
VOICE_TIMEOUT_MS=30000
VOICE_RETRY_COUNT=1
VOICE_FAIL_FAST=true

# Logging and monitoring
VOICE_LOG_LEVEL=info
VOICE_TRACK_PERFORMANCE=true

# ElevenLabs (now secondary/fallback only)
ELEVENLABS_FALLBACK_ONLY=true
EOF

echo -e "${GREEN}‚úì Environment configuration updated${NC}"

echo -e "\n${YELLOW}üîß Creating enhanced VoiceRouter service...${NC}"

# Create new VoiceRouter that prioritizes Sesame
cat > backend/src/services/VoiceRouter.ts << 'EOF'
/**
 * Voice Router - Sesame-Primary with Explicit Fallback Control
 * Routes voice requests to Sesame first, with controlled fallback to ElevenLabs
 */

import { sesameService } from './SesameService';
import { logger } from '../utils/logger';
import { synthesizeVoice, synthesizeArchetypalVoice } from '../utils/voiceService';

export interface VoiceRequest {
  text: string;
  element?: string;
  personality?: string;
  voiceEngine?: 'sesame' | 'elevenlabs' | 'auto';
  useCSM?: boolean;
  contextSegments?: any[];
  userId?: string;
  sessionId?: string;
  fallbackEnabled?: boolean;
}

export interface VoiceResponse {
  success: boolean;
  audioUrl?: string;
  audioBuffer?: Buffer;
  engine: 'sesame' | 'elevenlabs' | 'failed';
  model?: string;
  processingTimeMs?: number;
  fallbackUsed?: boolean;
  error?: string;
  metadata?: {
    voiceId?: string;
    archetype?: string;
    personality?: string;
    energySignature?: string;
  };
}

class VoiceRouter {
  private config = {
    sesamePrimary: process.env.SESAME_PRIMARY_MODE === 'true',
    fallbackEnabled: process.env.SESAME_FALLBACK_ENABLED === 'true',
    timeout: parseInt(process.env.VOICE_TIMEOUT_MS || '30000'),
    retryCount: parseInt(process.env.VOICE_RETRY_COUNT || '1'),
    failFast: process.env.VOICE_FAIL_FAST === 'true',
    trackPerformance: process.env.VOICE_TRACK_PERFORMANCE === 'true'
  };

  /**
   * Route voice request with Sesame-first logic
   */
  async synthesize(request: VoiceRequest): Promise<VoiceResponse> {
    const startTime = Date.now();
    const requestId = Math.random().toString(36).substring(2, 8);
    
    logger.info(`[VoiceRouter:${requestId}] Starting voice synthesis`, {
      text: request.text.substring(0, 50) + '...',
      engine: request.voiceEngine || 'auto',
      sesamePrimary: this.config.sesamePrimary,
      fallbackEnabled: this.config.fallbackEnabled || request.fallbackEnabled
    });

    // Force Sesame first if primary mode enabled (unless explicitly requesting ElevenLabs)
    const shouldTrySesame = this.config.sesamePrimary && 
                           request.voiceEngine !== 'elevenlabs' &&
                           sesameService.isEnabled();

    if (shouldTrySesame) {
      const sesameResult = await this.trySesame(request, requestId);
      if (sesameResult.success) {
        const duration = Date.now() - startTime;
        logger.info(`[VoiceRouter:${requestId}] ‚úÖ Sesame synthesis successful (${duration}ms)`);
        return { ...sesameResult, processingTimeMs: duration };
      }

      // Sesame failed - log explicitly
      logger.warn(`[VoiceRouter:${requestId}] ‚ùå Sesame synthesis failed: ${sesameResult.error}`);
      
      // Only fallback if explicitly enabled
      if (this.config.fallbackEnabled || request.fallbackEnabled) {
        logger.info(`[VoiceRouter:${requestId}] üîÑ Falling back to ElevenLabs...`);
        const fallbackResult = await this.tryElevenLabs(request, requestId);
        const duration = Date.now() - startTime;
        
        return {
          ...fallbackResult,
          fallbackUsed: true,
          processingTimeMs: duration
        };
      } else {
        // Fail fast - no silent fallback
        const duration = Date.now() - startTime;
        logger.error(`[VoiceRouter:${requestId}] ‚ùå Voice synthesis failed, no fallback enabled`);
        return {
          success: false,
          engine: 'failed',
          error: 'Sesame synthesis failed and fallback is disabled',
          processingTimeMs: duration
        };
      }
    }

    // Direct ElevenLabs request or Sesame unavailable
    const elevenlabsResult = await this.tryElevenLabs(request, requestId);
    const duration = Date.now() - startTime;
    return { ...elevenlabsResult, processingTimeMs: duration };
  }

  /**
   * Try Sesame synthesis with timeout
   */
  private async trySesame(request: VoiceRequest, requestId: string): Promise<VoiceResponse> {
    try {
      const sesameResponse = await Promise.race([
        sesameService.generateResponse(request.text),
        this.createTimeout(this.config.timeout, 'Sesame synthesis timeout')
      ]);

      if (sesameResponse.success && sesameResponse.audio) {
        logger.info(`[VoiceRouter:${requestId}] Sesame generated audio (${sesameResponse.model})`);
        return {
          success: true,
          audioBuffer: sesameResponse.audio,
          engine: 'sesame',
          model: sesameResponse.model
        };
      } else {
        throw new Error(sesameResponse.error || 'No audio generated');
      }
    } catch (error: any) {
      logger.warn(`[VoiceRouter:${requestId}] Sesame error:`, error.message);
      return {
        success: false,
        engine: 'failed',
        error: error.message
      };
    }
  }

  /**
   * Try ElevenLabs synthesis
   */
  private async tryElevenLabs(request: VoiceRequest, requestId: string): Promise<VoiceResponse> {
    try {
      logger.info(`[VoiceRouter:${requestId}] Using ElevenLabs synthesis`);
      
      // Use archetypal voice if element specified
      if (request.element && request.element !== 'aether') {
        const result = await synthesizeArchetypalVoice({
          text: request.text,
          primaryArchetype: request.element,
          userId: request.userId
        });

        return {
          success: true,
          audioUrl: result.audioUrl,
          engine: 'elevenlabs',
          model: 'elevenlabs-archetypal',
          metadata: result.voiceMetadata
        };
      } else {
        // Standard ElevenLabs synthesis
        const defaultVoiceId = process.env.DEFAULT_VOICE_ID || 'LcfcDJNUP1GQjkzn1xUU';
        const audioUrl = await synthesizeVoice({
          text: request.text,
          voiceId: defaultVoiceId
        });

        return {
          success: true,
          audioUrl,
          engine: 'elevenlabs',
          model: 'elevenlabs-standard'
        };
      }
    } catch (error: any) {
      logger.error(`[VoiceRouter:${requestId}] ElevenLabs error:`, error.message);
      return {
        success: false,
        engine: 'failed',
        error: error.message
      };
    }
  }

  /**
   * Create timeout promise
   */
  private createTimeout(ms: number, message: string): Promise<never> {
    return new Promise((_, reject) => {
      setTimeout(() => reject(new Error(message)), ms);
    });
  }

  /**
   * Get router status
   */
  getStatus() {
    return {
      sesamePrimary: this.config.sesamePrimary,
      fallbackEnabled: this.config.fallbackEnabled,
      sesameAvailable: sesameService.isEnabled(),
      timeout: this.config.timeout,
      failFast: this.config.failFast
    };
  }
}

export const voiceRouter = new VoiceRouter();
EOF

echo -e "${GREEN}‚úì VoiceRouter service created${NC}"

echo -e "\n${YELLOW}üîß Creating voice API endpoint...${NC}"

# Create voice API endpoint that uses the new router
mkdir -p app/api/voice/unified

cat > app/api/voice/unified/route.ts << 'EOF'
import { NextRequest, NextResponse } from 'next/server';
import { voiceRouter } from '../../../../backend/src/services/VoiceRouter';

/**
 * Unified Voice API - Sesame-Primary with Explicit Fallback
 */
export async function POST(request: NextRequest) {
  try {
    const { 
      text, 
      element, 
      voiceEngine = 'auto',
      useCSM = true,
      fallbackEnabled = false,
      contextSegments,
      userId,
      sessionId 
    } = await request.json();

    if (!text) {
      return NextResponse.json({ error: 'Text is required' }, { status: 400 });
    }

    // Route through VoiceRouter
    const result = await voiceRouter.synthesize({
      text,
      element,
      voiceEngine,
      useCSM,
      contextSegments,
      userId,
      sessionId,
      fallbackEnabled
    });

    if (!result.success) {
      return NextResponse.json({ 
        error: result.error,
        engine: result.engine,
        fallbackUsed: result.fallbackUsed || false
      }, { status: 500 });
    }

    // Return audio data
    if (result.audioBuffer) {
      // Convert buffer to base64 for JSON response
      const audioBase64 = result.audioBuffer.toString('base64');
      return NextResponse.json({
        success: true,
        audioData: audioBase64,
        format: 'wav',
        engine: result.engine,
        model: result.model,
        processingTimeMs: result.processingTimeMs,
        fallbackUsed: result.fallbackUsed || false,
        metadata: result.metadata
      });
    } else if (result.audioUrl) {
      return NextResponse.json({
        success: true,
        audioUrl: result.audioUrl,
        engine: result.engine,
        model: result.model,
        processingTimeMs: result.processingTimeMs,
        fallbackUsed: result.fallbackUsed || false,
        metadata: result.metadata
      });
    } else {
      return NextResponse.json({ 
        error: 'No audio generated',
        engine: result.engine
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('Voice API error:', error);
    return NextResponse.json({ 
      error: 'Voice synthesis failed',
      details: error.message 
    }, { status: 500 });
  }
}

export async function GET() {
  // Status endpoint
  const status = voiceRouter.getStatus();
  return NextResponse.json({
    status: 'online',
    voiceRouter: status,
    timestamp: new Date().toISOString()
  });
}
EOF

echo -e "${GREEN}‚úì Unified Voice API created${NC}"

echo -e "\n${YELLOW}üîß Updating main Oracle chat route...${NC}"

# Update the oracle chat route to use the new voice system
cat > app/api/oracle/chat/route.ts << 'EOF'
import { NextRequest, NextResponse } from 'next/server';

// Enhanced Oracle Chat API with Sesame-Primary Voice
export async function POST(request: NextRequest) {
  try {
    const { 
      message, 
      oracle, 
      sessionId, 
      element, 
      enableVoice, 
      voiceEngine = 'auto',
      useCSM = true, 
      emotionalState,
      fallbackEnabled = false
    } = await request.json();
    
    if (!message) {
      return NextResponse.json({ error: 'Missing message' }, { status: 400 });
    }

    // Get user session (in production, get from auth)
    const userId = request.headers.get('x-user-id') || 'anonymous';
    const currentSessionId = sessionId || `session-${Date.now()}`;
    const threadId = request.headers.get('x-thread-id') || currentSessionId;

    // Proxy to deployed backend Maya endpoint
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3002';
    
    const response = await fetch(`${backendUrl}/api/v1/converse/message`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-user-id': userId,
        'x-session-id': currentSessionId,
        'x-thread-id': threadId
      },
      body: JSON.stringify({
        userText: message,
        element: element || 'aether',
        userId: userId,
        enableVoice: enableVoice || false,
        useCSM: useCSM,
        emotionalState: emotionalState,
        metadata: {
          oracle: oracle || 'Maya',
          sessionId: currentSessionId,
          threadId: threadId,
          personality: 'adaptive mystical guide',
          voiceProfile: 'maya_oracle_v1',
          voiceEngine: voiceEngine
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Backend request failed: ${response.status}`);
    }

    const result = await response.json();

    // Handle voice generation with new Sesame-primary system
    let audioResponse = null;
    let voiceMetadata = null;
    
    if (enableVoice && result.response?.text) {
      try {
        console.log(`üé§ Generating voice with engine: ${voiceEngine}, fallback: ${fallbackEnabled}`);
        
        // Use new unified voice API
        const voiceResponse = await fetch('/api/voice/unified', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            text: result.response.text,
            element: result.response.element || element || 'aether',
            voiceEngine: voiceEngine,
            useCSM: useCSM,
            fallbackEnabled: fallbackEnabled,
            contextSegments: result.contextSegments,
            userId: userId,
            sessionId: currentSessionId
          })
        });
        
        if (voiceResponse.ok) {
          const voiceData = await voiceResponse.json();
          
          if (voiceData.success) {
            // Handle different response formats
            if (voiceData.audioData) {
              audioResponse = `data:audio/wav;base64,${voiceData.audioData}`;
            } else if (voiceData.audioUrl) {
              audioResponse = voiceData.audioUrl;
            }
            
            voiceMetadata = {
              engine: voiceData.engine,
              model: voiceData.model,
              processingTimeMs: voiceData.processingTimeMs,
              fallbackUsed: voiceData.fallbackUsed,
              metadata: voiceData.metadata
            };
            
            console.log(`üé§ Voice generated successfully via ${voiceData.engine}${voiceData.fallbackUsed ? ' (fallback)' : ''}`);
          } else {
            console.error(`üé§ Voice generation failed: ${voiceData.error}`);
            voiceMetadata = { 
              error: voiceData.error, 
              engine: voiceData.engine,
              fallbackUsed: voiceData.fallbackUsed 
            };
          }
        } else {
          const errorData = await voiceResponse.json();
          console.error('üé§ Voice API request failed:', errorData);
          voiceMetadata = { error: errorData.error };
        }
      } catch (voiceError) {
        console.error('üé§ Voice generation error:', voiceError);
        voiceMetadata = { error: voiceError instanceof Error ? voiceError.message : 'Voice generation failed' };
      }
    }

    return NextResponse.json({
      message: result.response?.text || result.message,
      element: result.response?.element || result.element || 'aether',
      confidence: result.response?.confidence || 0.8,
      sessionId: currentSessionId,
      threadId: threadId,
      audioUrl: audioResponse,
      voiceMetadata: voiceMetadata,
      contextUsed: result.contextSegments?.length || 0,
      breakthroughDetected: result.breakthroughDetected,
      breakthroughMarkers: result.breakthroughMarkers,
      metadata: {
        source: result.response?.source || 'maya',
        processingTime: result.response?.processingTime || 0,
        model: result.response?.metadata?.model || 'maya-oracle',
        voiceEngine: voiceEngine,
        voiceGenerated: !!audioResponse,
        voiceMetadata: voiceMetadata,
        ...result.response?.metadata
      }
    });

  } catch (error) {
    console.error('Oracle chat error:', error);
    
    // Maya's warm fallback response
    return NextResponse.json({
      message: "I'm having some technical difficulties connecting to my full system. I'm still here with you though - what's on your mind?",
      element: 'aether',
      confidence: 0.5,
      metadata: {
        fallback: true,
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString(),
        maya_mode: 'warmth_fallback'
      }
    });
  }
}

// Keep existing GET endpoint
export async function GET(request: NextRequest) {
  try {
    const userId = request.headers.get('x-user-id') || 'anonymous';
    const sessionId = request.nextUrl.searchParams.get('sessionId') || `session-${Date.now()}`;

    // Proxy to backend health/status endpoint
    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3002';
    
    const response = await fetch(`${backendUrl}/api/v1/converse/health`, {
      method: 'GET',
      headers: {
        'x-user-id': userId,
        'x-session-id': sessionId
      }
    });

    if (!response.ok) {
      throw new Error(`Backend health check failed: ${response.status}`);
    }

    const healthData = await response.json();

    return NextResponse.json({
      summary: 'Oracle systems are online and ready to provide guidance.',
      sessionId,
      status: 'active',
      backend: healthData,
      oracle: 'Maya',
      capabilities: [
        'Streaming conversations',
        'Elemental guidance (Air, Fire, Water, Earth, Aether)',
        'Sesame-primary voice synthesis',
        'Memory integration',
        'Explicit fallback control'
      ]
    });

  } catch (error) {
    console.error('Oracle status error:', error);
    return NextResponse.json({ 
      error: 'Oracle systems temporarily offline',
      status: 'maintenance',
      message: 'Please try again in a few moments while we realign the cosmic frequencies.',
      sessionId: request.nextUrl.searchParams.get('sessionId') || `session-${Date.now()}`
    }, { status: 503 });
  }
}
EOF

echo -e "${GREEN}‚úì Oracle chat route updated${NC}"

echo -e "\n${YELLOW}üß™ Creating verification script...${NC}"

# Create verification script
cat > scripts/verify-sesame-primary.sh << 'EOF'
#!/bin/bash

# Verify Sesame-Primary Configuration
set -e

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç Verifying Sesame-Primary Configuration${NC}"
echo "=========================================="

# Check environment variables
echo -e "\n${YELLOW}üìã Checking environment variables...${NC}"

check_env() {
    local var=$1
    local expected=$2
    local value=$(grep "^$var=" .env.local | cut -d'=' -f2 || echo "NOT_SET")
    
    if [ "$value" = "$expected" ]; then
        echo -e "${GREEN}‚úì $var=$value${NC}"
    else
        echo -e "${RED}‚ùå $var=$value (expected: $expected)${NC}"
    fi
}

check_env "VOICE_PRIMARY" "sesame"
check_env "SESAME_PRIMARY_MODE" "true"
check_env "SESAME_FALLBACK_ENABLED" "false"
check_env "ELEVENLABS_FALLBACK_ONLY" "true"

# Check file existence
echo -e "\n${YELLOW}üìÅ Checking created files...${NC}"

check_file() {
    local file=$1
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì $file exists${NC}"
    else
        echo -e "${RED}‚ùå $file missing${NC}"
    fi
}

check_file "backend/src/services/VoiceRouter.ts"
check_file "app/api/voice/unified/route.ts"

# Check if Sesame server is running
echo -e "\n${YELLOW}üñ•Ô∏è  Checking Sesame server status...${NC}"
if curl -s http://localhost:8000/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì Sesame server is running on localhost:8000${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Sesame server not running - start with: ./scripts/run-sesame-server.sh${NC}"
fi

# Check backend server
echo -e "\n${YELLOW}üñ•Ô∏è  Checking backend server status...${NC}"
if curl -s http://localhost:3002/api/v1/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì Backend server is running on localhost:3002${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Backend server not running - start with: cd backend && npm run dev${NC}"
fi

echo -e "\n${BLUE}üìù Next Steps:${NC}"
echo "1. Start Sesame server: ${YELLOW}./scripts/run-sesame-server.sh${NC}"
echo "2. Start backend server: ${YELLOW}cd backend && npm run dev${NC}"
echo "3. Test voice synthesis: ${YELLOW}curl -X POST localhost:3000/api/voice/unified -H 'Content-Type: application/json' -d '{\"text\":\"Hello from Sesame!\", \"voiceEngine\":\"auto\"}'${NC}"
echo "4. Monitor logs for Sesame-first behavior"

echo -e "\n${GREEN}üéâ Configuration verification complete!${NC}"
EOF

chmod +x scripts/verify-sesame-primary.sh

echo -e "${GREEN}‚úì Verification script created${NC}"

echo -e "\n${BLUE}=============================================="
echo "‚úÖ Sesame-Primary Voice System Setup Complete!"
echo -e "==============================================${NC}"

echo -e "\n${CYAN}üìã Summary of Changes:${NC}"
echo "‚Ä¢ Environment configured for Sesame-first routing"
echo "‚Ä¢ VoiceRouter service created with explicit fallback control"  
echo "‚Ä¢ Unified voice API endpoint created"
echo "‚Ä¢ Oracle chat route updated for new voice system"
echo "‚Ä¢ Verification script created"

echo -e "\n${CYAN}üöÄ To activate the new system:${NC}"
echo "1. Start Sesame server:   ${YELLOW}./scripts/run-sesame-server.sh${NC}"
echo "2. Start backend:         ${YELLOW}cd backend && npm run dev${NC}"
echo "3. Verify configuration:  ${YELLOW}./scripts/verify-sesame-primary.sh${NC}"

echo -e "\n${CYAN}üéõÔ∏è  Voice Control Parameters:${NC}"
echo "‚Ä¢ voiceEngine: 'sesame', 'elevenlabs', 'auto'"
echo "‚Ä¢ fallbackEnabled: true/false (explicit fallback control)"
echo "‚Ä¢ useCSM: true/false (Sesame CSM usage)"

echo -e "\n${CYAN}üìä Behavior Changes:${NC}"
echo "‚Ä¢ Sesame is now primary voice engine"
echo "‚Ä¢ ElevenLabs only used when explicitly requested or as fallback"
echo "‚Ä¢ No silent fallbacks - errors are logged and exposed"
echo "‚Ä¢ Performance and engine usage tracked in logs"

echo -e "\n${GREEN}Ready to flip the switch! üé§‚ú®${NC}"
EOF

chmod +x scripts/set-sesame-primary.sh

<function_calls>
<invoke name="TodoWrite">
<parameter name="todos">[{"id": "1", "content": "Create patch script to make Sesame primary voice", "status": "completed", "priority": "high"}, {"id": "2", "content": "Update voiceService.ts for Sesame-first logic", "status": "completed", "priority": "high"}, {"id": "3", "content": "Update API route for voiceEngine parameter", "status": "completed", "priority": "high"}, {"id": "4", "content": "Update environment configuration", "status": "completed", "priority": "high"}, {"id": "5", "content": "Create verification script", "status": "completed", "priority": "medium"}]