#!/bin/bash
# Vulnerability Scanning for Spiralogic Oracle System
# Level 5 DevSecOps - Multi-tool vulnerability assessment

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
REPORT_DIR="$PROJECT_ROOT/security-reports"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Tool versions
TRIVY_VERSION="0.47.0"
GRYPE_VERSION="0.73.4"
SYFT_VERSION="0.97.1"

# Report files
TRIVY_REPORT="$REPORT_DIR/trivy-report-$TIMESTAMP.json"
GRYPE_REPORT="$REPORT_DIR/grype-report-$TIMESTAMP.json"
NPM_AUDIT_REPORT="$REPORT_DIR/npm-audit-report-$TIMESTAMP.json"
SNYK_REPORT="$REPORT_DIR/snyk-report-$TIMESTAMP.json"
DOCKER_SCOUT_REPORT="$REPORT_DIR/docker-scout-report-$TIMESTAMP.json"
COMBINED_REPORT="$REPORT_DIR/vulnerability-scan-combined-$TIMESTAMP.json"
SUMMARY_REPORT="$REPORT_DIR/vulnerability-scan-summary-$TIMESTAMP.txt"

# Severity thresholds
CRITICAL_THRESHOLD=0
HIGH_THRESHOLD=5
MEDIUM_THRESHOLD=20

# Container images to scan
CONTAINER_IMAGES=(
    "spiralogic-oracle:latest"
    "spiralogic-fire-agent:latest"
    "spiralogic-water-agent:latest"
    "spiralogic-earth-agent:latest"
    "spiralogic-air-agent:latest"
    "spiralogic-aether-agent:latest"
)

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

# Check if running in CI/CD
is_ci() {
    [[ "${CI:-false}" == "true" ]] || [[ -n "${GITHUB_ACTIONS:-}" ]] || [[ -n "${GITLAB_CI:-}" ]]
}

# Install scanning tools
install_tools() {
    log "Installing vulnerability scanning tools..."
    
    mkdir -p "$PROJECT_ROOT/bin"
    export PATH="$PROJECT_ROOT/bin:$PATH"
    
    # Install Trivy
    if ! command -v trivy &> /dev/null; then
        log "Installing Trivy v$TRIVY_VERSION..."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            TRIVY_URL="https://github.com/aquasecurity/trivy/releases/download/v$TRIVY_VERSION/trivy_${TRIVY_VERSION}_macOS-64bit.tar.gz"
        else
            TRIVY_URL="https://github.com/aquasecurity/trivy/releases/download/v$TRIVY_VERSION/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
        fi
        
        curl -sSL "$TRIVY_URL" | tar -xz -C "$PROJECT_ROOT/bin" trivy
        chmod +x "$PROJECT_ROOT/bin/trivy"
    fi
    
    # Install Grype
    if ! command -v grype &> /dev/null; then
        log "Installing Grype v$GRYPE_VERSION..."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            GRYPE_URL="https://github.com/anchore/grype/releases/download/v$GRYPE_VERSION/grype_${GRYPE_VERSION}_darwin_amd64.tar.gz"
        else
            GRYPE_URL="https://github.com/anchore/grype/releases/download/v$GRYPE_VERSION/grype_${GRYPE_VERSION}_linux_amd64.tar.gz"
        fi
        
        curl -sSL "$GRYPE_URL" | tar -xz -C "$PROJECT_ROOT/bin" grype
        chmod +x "$PROJECT_ROOT/bin/grype"
    fi
    
    # Install Syft (for SBOM generation)
    if ! command -v syft &> /dev/null; then
        log "Installing Syft v$SYFT_VERSION..."
        if [[ "$OSTYPE" == "darwin"* ]]; then
            SYFT_URL="https://github.com/anchore/syft/releases/download/v$SYFT_VERSION/syft_${SYFT_VERSION}_darwin_amd64.tar.gz"
        else
            SYFT_URL="https://github.com/anchore/syft/releases/download/v$SYFT_VERSION/syft_${SYFT_VERSION}_linux_amd64.tar.gz"
        fi
        
        curl -sSL "$SYFT_URL" | tar -xz -C "$PROJECT_ROOT/bin" syft
        chmod +x "$PROJECT_ROOT/bin/syft"
    fi
}

# Create Trivy configuration
create_trivy_config() {
    cat > "$PROJECT_ROOT/.trivyignore" << 'EOF'
# Known false positives or accepted risks
# Format: CVE-ID (optional comment)

# Example: CVE-2023-12345 # Accepted risk - not exploitable in our context

# Development dependencies (not in production)
CVE-2021-23337  # lodash - dev dependency only
CVE-2021-3918   # json-schema - dev dependency only

# Fixed in newer versions but breaking changes prevent upgrade
# (Include justification and remediation timeline)

# Low severity issues in base images that don't affect our use case
# (Document why they're not applicable)
EOF
}

# Run Trivy filesystem scan
run_trivy_filesystem() {
    log "Running Trivy filesystem vulnerability scan..."
    
    create_trivy_config
    
    trivy fs \
        --format json \
        --output "$TRIVY_REPORT" \
        --ignorefile "$PROJECT_ROOT/.trivyignore" \
        --severity CRITICAL,HIGH,MEDIUM,LOW \
        --scanners vuln,secret,config \
        --skip-dirs node_modules,dist,build,.git \
        "$PROJECT_ROOT" || {
        local exit_code=$?
        if [[ $exit_code -ne 0 ]]; then
            error "Trivy filesystem scan failed with exit code $exit_code"
            return $exit_code
        fi
    }
    
    success "Trivy filesystem scan completed"
    return 0
}

# Run Trivy container image scans
run_trivy_images() {
    log "Running Trivy container image scans..."
    
    local image_reports=()
    
    for image in "${CONTAINER_IMAGES[@]}"; do
        local image_report="$REPORT_DIR/trivy-image-$(echo "$image" | tr ':/' '-')-$TIMESTAMP.json"
        
        if docker image inspect "$image" &>/dev/null; then
            log "Scanning container image: $image"
            
            trivy image \
                --format json \
                --output "$image_report" \
                --ignorefile "$PROJECT_ROOT/.trivyignore" \
                --severity CRITICAL,HIGH,MEDIUM,LOW \
                --scanners vuln,secret,config \
                "$image" || {
                warn "Trivy scan failed for image $image"
                continue
            }
            
            image_reports+=("$image_report")
        else
            warn "Container image $image not found locally - skipping"
        fi
    done
    
    # Combine image reports
    if [[ ${#image_reports[@]} -gt 0 ]]; then
        local combined_images_report="$REPORT_DIR/trivy-images-combined-$TIMESTAMP.json"
        jq -s '.' "${image_reports[@]}" > "$combined_images_report"
        success "Trivy image scans completed"
    fi
    
    return 0
}

# Run Grype vulnerability scan
run_grype() {
    log "Running Grype vulnerability scan..."
    
    # Scan filesystem
    grype dir:"$PROJECT_ROOT" \
        --output json \
        --file "$GRYPE_REPORT" \
        --exclude "./node_modules/**" \
        --exclude "./dist/**" \
        --exclude "./build/**" \
        --exclude "./.git/**" || {
        local exit_code=$?
        warn "Grype scan completed with warnings (exit code: $exit_code)"
    }
    
    success "Grype scan completed"
    return 0
}

# Run NPM audit
run_npm_audit() {
    log "Running NPM security audit..."
    
    # Frontend audit
    if [[ -f "$PROJECT_ROOT/package.json" ]]; then
        log "Auditing frontend dependencies..."
        cd "$PROJECT_ROOT"
        npm audit --json --audit-level=moderate > "$NPM_AUDIT_REPORT" 2>/dev/null || {
            local exit_code=$?
            if [[ $exit_code -eq 1 ]]; then
                warn "NPM audit found vulnerabilities in frontend"
            else
                warn "NPM audit failed for frontend (exit code: $exit_code)"
            fi
        }
    fi
    
    # Backend audit
    if [[ -f "$PROJECT_ROOT/backend/package.json" ]]; then
        log "Auditing backend dependencies..."
        cd "$PROJECT_ROOT/backend"
        local backend_audit="$REPORT_DIR/npm-audit-backend-$TIMESTAMP.json"
        npm audit --json --audit-level=moderate > "$backend_audit" 2>/dev/null || {
            local exit_code=$?
            if [[ $exit_code -eq 1 ]]; then
                warn "NPM audit found vulnerabilities in backend"
            else
                warn "NPM audit failed for backend (exit code: $exit_code)"
            fi
        }
        
        # Combine frontend and backend reports
        if [[ -f "$NPM_AUDIT_REPORT" ]] && [[ -f "$backend_audit" ]]; then
            jq -s '.[0] * .[1]' "$NPM_AUDIT_REPORT" "$backend_audit" > "${NPM_AUDIT_REPORT}.tmp"
            mv "${NPM_AUDIT_REPORT}.tmp" "$NPM_AUDIT_REPORT"
        elif [[ -f "$backend_audit" ]]; then
            mv "$backend_audit" "$NPM_AUDIT_REPORT"
        fi
    fi
    
    success "NPM audit completed"
    return 0
}

# Run Snyk scan (if available)
run_snyk() {
    if ! command -v snyk &> /dev/null; then
        warn "Snyk CLI not available - install with 'npm install -g snyk' for enhanced scanning"
        return 0
    fi
    
    log "Running Snyk vulnerability scan..."
    
    # Check if authenticated
    if ! snyk auth &>/dev/null; then
        warn "Snyk not authenticated - run 'snyk auth' first"
        return 0
    fi
    
    cd "$PROJECT_ROOT"
    
    # Scan for vulnerabilities
    snyk test --json > "$SNYK_REPORT" 2>/dev/null || {
        local exit_code=$?
        if [[ $exit_code -eq 1 ]]; then
            warn "Snyk found vulnerabilities"
        else
            warn "Snyk scan failed (exit code: $exit_code)"
        fi
    }
    
    # Scan for license issues
    local snyk_license_report="$REPORT_DIR/snyk-license-$TIMESTAMP.json"
    snyk test --license --json > "$snyk_license_report" 2>/dev/null || {
        warn "Snyk license scan completed with warnings"
    }
    
    success "Snyk scan completed"
    return 0
}

# Run Docker Scout (if available)
run_docker_scout() {
    if ! command -v docker &> /dev/null || ! docker scout version &>/dev/null; then
        warn "Docker Scout not available - install Docker Desktop with Scout enabled"
        return 0
    fi
    
    log "Running Docker Scout vulnerability scan..."
    
    for image in "${CONTAINER_IMAGES[@]}"; do
        if docker image inspect "$image" &>/dev/null; then
            log "Scanning with Docker Scout: $image"
            
            local scout_report="$REPORT_DIR/docker-scout-$(echo "$image" | tr ':/' '-')-$TIMESTAMP.json"
            
            docker scout cves "$image" --format sarif --output "$scout_report" || {
                warn "Docker Scout scan failed for image $image"
            }
        fi
    done
    
    success "Docker Scout scan completed"
    return 0
}

# Generate SBOM (Software Bill of Materials)
generate_sbom() {
    log "Generating Software Bill of Materials (SBOM)..."
    
    local sbom_report="$REPORT_DIR/sbom-$TIMESTAMP.json"
    
    syft "$PROJECT_ROOT" \
        --output spdx-json="$sbom_report" \
        --exclude "./node_modules/**" \
        --exclude "./dist/**" \
        --exclude "./build/**" \
        --exclude "./.git/**" || {
        warn "SBOM generation completed with warnings"
    }
    
    # Generate SBOM for container images
    for image in "${CONTAINER_IMAGES[@]}"; do
        if docker image inspect "$image" &>/dev/null; then
            local image_sbom="$REPORT_DIR/sbom-$(echo "$image" | tr ':/' '-')-$TIMESTAMP.json"
            syft "$image" --output spdx-json="$image_sbom" || {
                warn "SBOM generation failed for image $image"
            }
        fi
    done
    
    success "SBOM generation completed"
    return 0
}

# Analyze vulnerability results
analyze_vulnerabilities() {
    log "Analyzing vulnerability scan results..."
    
    local critical_count=0
    local high_count=0
    local medium_count=0
    local low_count=0
    local total_count=0
    
    local findings=()
    local critical_findings=()
    
    # Analyze Trivy results
    if [[ -f "$TRIVY_REPORT" ]] && [[ -s "$TRIVY_REPORT" ]]; then
        log "Analyzing Trivy results..."
        
        # Count vulnerabilities by severity
        local trivy_critical=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$TRIVY_REPORT" 2>/dev/null || echo "0")
        local trivy_high=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$TRIVY_REPORT" 2>/dev/null || echo "0")
        local trivy_medium=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "$TRIVY_REPORT" 2>/dev/null || echo "0")
        local trivy_low=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "$TRIVY_REPORT" 2>/dev/null || echo "0")
        
        critical_count=$((critical_count + trivy_critical))
        high_count=$((high_count + trivy_high))
        medium_count=$((medium_count + trivy_medium))
        low_count=$((low_count + trivy_low))
        
        findings+=("Trivy: $trivy_critical critical, $trivy_high high, $trivy_medium medium, $trivy_low low")
        
        # Extract critical vulnerabilities
        if [[ $trivy_critical -gt 0 ]]; then
            local critical_cves=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID] | join(", ")' "$TRIVY_REPORT" 2>/dev/null || echo "")
            critical_findings+=("Trivy Critical CVEs: $critical_cves")
        fi
    fi
    
    # Analyze Grype results
    if [[ -f "$GRYPE_REPORT" ]] && [[ -s "$GRYPE_REPORT" ]]; then
        log "Analyzing Grype results..."
        
        local grype_critical=$(jq '[.matches[]? | select(.vulnerability.severity == "Critical")] | length' "$GRYPE_REPORT" 2>/dev/null || echo "0")
        local grype_high=$(jq '[.matches[]? | select(.vulnerability.severity == "High")] | length' "$GRYPE_REPORT" 2>/dev/null || echo "0")
        local grype_medium=$(jq '[.matches[]? | select(.vulnerability.severity == "Medium")] | length' "$GRYPE_REPORT" 2>/dev/null || echo "0")
        local grype_low=$(jq '[.matches[]? | select(.vulnerability.severity == "Low")] | length' "$GRYPE_REPORT" 2>/dev/null || echo "0")
        
        findings+=("Grype: $grype_critical critical, $grype_high high, $grype_medium medium, $grype_low low")
    fi
    
    # Analyze NPM audit results
    if [[ -f "$NPM_AUDIT_REPORT" ]] && [[ -s "$NPM_AUDIT_REPORT" ]]; then
        log "Analyzing NPM audit results..."
        
        local npm_critical=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' "$NPM_AUDIT_REPORT" 2>/dev/null || echo "0")
        local npm_high=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' "$NPM_AUDIT_REPORT" 2>/dev/null || echo "0")
        local npm_moderate=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "moderate")) | length' "$NPM_AUDIT_REPORT" 2>/dev/null || echo "0")
        local npm_low=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "low")) | length' "$NPM_AUDIT_REPORT" 2>/dev/null || echo "0")
        
        findings+=("NPM Audit: $npm_critical critical, $npm_high high, $npm_moderate moderate, $npm_low low")
    fi
    
    total_count=$((critical_count + high_count + medium_count + low_count))
    
    # Determine risk level
    local risk_level="LOW"
    local risk_color="$GREEN"
    
    if [[ $critical_count -gt $CRITICAL_THRESHOLD ]]; then
        risk_level="CRITICAL"
        risk_color="$RED"
    elif [[ $high_count -gt $HIGH_THRESHOLD ]]; then
        risk_level="HIGH"
        risk_color="$RED"
    elif [[ $medium_count -gt $MEDIUM_THRESHOLD ]]; then
        risk_level="MEDIUM"
        risk_color="$YELLOW"
    fi
    
    # Create summary report
    {
        echo "# Spiralogic Oracle System - Vulnerability Scan Report"
        echo "Generated: $(date)"
        echo "Project: $PROJECT_ROOT"
        echo ""
        echo "## Executive Summary"
        echo "Risk Level: $risk_level"
        echo "Total Vulnerabilities: $total_count"
        echo "Critical: $critical_count"
        echo "High: $high_count"
        echo "Medium: $medium_count"
        echo "Low: $low_count"
        echo ""
        
        if [[ ${#findings[@]} -gt 0 ]]; then
            echo "## Scan Results by Tool"
            for finding in "${findings[@]}"; do
                echo "- $finding"
            done
            echo ""
        fi
        
        if [[ ${#critical_findings[@]} -gt 0 ]]; then
            echo "## 🚨 Critical Vulnerabilities"
            for critical in "${critical_findings[@]}"; do
                echo "- $critical"
            done
            echo ""
        fi
        
        echo "## Risk Assessment"
        if [[ $critical_count -gt $CRITICAL_THRESHOLD ]]; then
            echo "🔴 CRITICAL: Immediate action required - critical vulnerabilities detected"
            echo "- Block deployment until critical issues are resolved"
            echo "- Implement emergency patches or workarounds"
            echo "- Monitor for active exploitation"
        elif [[ $high_count -gt $HIGH_THRESHOLD ]]; then
            echo "🟠 HIGH: Schedule urgent remediation - high severity vulnerabilities exceed threshold"
            echo "- Plan remediation within 48-72 hours"
            echo "- Consider temporary mitigations"
        elif [[ $medium_count -gt $MEDIUM_THRESHOLD ]]; then
            echo "🟡 MEDIUM: Elevated risk - monitor and plan remediation"
            echo "- Schedule remediation within 1-2 weeks"
            echo "- Prioritize based on exploitability"
        else
            echo "🟢 LOW: Acceptable risk level"
            echo "- Continue with regular patching schedule"
            echo "- Monitor for new vulnerabilities"
        fi
        
        echo ""
        echo "## Recommendations"
        echo "1. Review detailed vulnerability reports"
        echo "2. Prioritize remediation based on CVSS scores and exploitability"
        echo "3. Update dependencies to latest secure versions"
        echo "4. Apply security patches to base container images"
        echo "5. Implement additional security controls if patches unavailable"
        echo "6. Regular scanning schedule: daily for containers, weekly for code"
        
        if is_ci; then
            echo "7. Integrate vulnerability gates in CI/CD pipeline"
        fi
        
        echo ""
        echo "## Detailed Reports"
        echo "- Trivy: $TRIVY_REPORT"
        echo "- Grype: $GRYPE_REPORT"
        echo "- NPM Audit: $NPM_AUDIT_REPORT"
        echo "- Snyk: $SNYK_REPORT"
        echo "- Combined: $COMBINED_REPORT"
    } > "$SUMMARY_REPORT"
    
    # Create combined JSON report
    {
        echo "{"
        echo "  \"timestamp\": \"$(date -Iseconds)\","
        echo "  \"project\": \"$PROJECT_ROOT\","
        echo "  \"summary\": {"
        echo "    \"risk_level\": \"$risk_level\","
        echo "    \"total_vulnerabilities\": $total_count,"
        echo "    \"critical\": $critical_count,"
        echo "    \"high\": $high_count,"
        echo "    \"medium\": $medium_count,"
        echo "    \"low\": $low_count,"
        echo "    \"thresholds\": {"
        echo "      \"critical\": $CRITICAL_THRESHOLD,"
        echo "      \"high\": $HIGH_THRESHOLD,"
        echo "      \"medium\": $MEDIUM_THRESHOLD"
        echo "    }"
        echo "  },"
        echo "  \"reports\": {"
        echo "    \"trivy\": \"$TRIVY_REPORT\","
        echo "    \"grype\": \"$GRYPE_REPORT\","
        echo "    \"npm_audit\": \"$NPM_AUDIT_REPORT\","
        echo "    \"snyk\": \"$SNYK_REPORT\""
        echo "  }"
        echo "}"
    } > "$COMBINED_REPORT"
    
    log -e "${risk_color}Risk Level: $risk_level${NC}"
    
    # Return number of critical vulnerabilities for exit code
    return $critical_count
}

# Send notifications
send_notifications() {
    local risk_level=$1
    local critical_count=$2
    local total_count=$3
    
    local message="Vulnerability scan completed - Risk: $risk_level, Critical: $critical_count, Total: $total_count"
    
    if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
        local color="good"
        [[ $risk_level == "CRITICAL" ]] && color="danger"
        [[ $risk_level == "HIGH" ]] && color="warning"
        
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🔍 Vulnerability Scan Alert\",\"attachments\":[{\"color\":\"$color\",\"text\":\"$message\"}]}" \
            "$SLACK_WEBHOOK_URL" || warn "Failed to send Slack notification"
    fi
}

# Main execution
main() {
    log "Starting Spiralogic Oracle System vulnerability scanning..."
    
    # Create report directory
    mkdir -p "$REPORT_DIR"
    
    # Install tools
    install_tools
    
    # Run scans
    run_trivy_filesystem
    run_trivy_images
    run_grype
    run_npm_audit
    run_snyk
    run_docker_scout
    generate_sbom
    
    # Analyze results
    analyze_vulnerabilities
    local critical_count=$?
    
    # Display summary
    cat "$SUMMARY_REPORT"
    
    # Send notifications
    local risk_level
    if [[ $critical_count -gt $CRITICAL_THRESHOLD ]]; then
        risk_level="CRITICAL"
    elif [[ -f "$COMBINED_REPORT" ]]; then
        risk_level=$(jq -r '.summary.risk_level' "$COMBINED_REPORT" 2>/dev/null || echo "UNKNOWN")
    else
        risk_level="UNKNOWN"
    fi
    
    local total_count
    if [[ -f "$COMBINED_REPORT" ]]; then
        total_count=$(jq -r '.summary.total_vulnerabilities' "$COMBINED_REPORT" 2>/dev/null || echo "0")
    else
        total_count="0"
    fi
    
    send_notifications "$risk_level" "$critical_count" "$total_count"
    
    # Cleanup
    rm -f "$PROJECT_ROOT/.trivyignore"
    
    # Exit based on risk level
    if [[ $critical_count -gt $CRITICAL_THRESHOLD ]]; then
        error "Vulnerability scanning failed - critical vulnerabilities found!"
        exit 1
    elif [[ $risk_level == "HIGH" ]]; then
        warn "High-risk vulnerabilities detected"
        exit 2
    else
        success "Vulnerability scanning completed"
        exit 0
    fi
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi