FROM python:3.11-slim

WORKDIR /app

# Install minimal dependencies for mock server
RUN pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn==0.24.0 \
    pydantic==2.5.0

# Create mock API server
RUN cat > api_server.py << 'EOF'
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import base64
import time

app = FastAPI()

class TTSRequest(BaseModel):
    text: str
    voice: str = "maya"
    format: str = "wav"
    speed: float = 1.0
    temperature: float = 0.7

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "model": "mock-csm",
        "model_loaded": True,
        "gpu_available": False,
        "provider": "Mock Sesame CSM"
    }

@app.post("/tts")
async def text_to_speech(request: TTSRequest):
    # Create a proper WAV header for mock audio
    # This is a valid WAV file header for a silent audio
    wav_header = (
        b'RIFF'  # ChunkID
        b'\x24\x00\x00\x00'  # ChunkSize (36 bytes)
        b'WAVE'  # Format
        b'fmt '  # Subchunk1ID
        b'\x10\x00\x00\x00'  # Subchunk1Size (16 for PCM)
        b'\x01\x00'  # AudioFormat (1 for PCM)
        b'\x01\x00'  # NumChannels (1 for mono)
        b'\x44\xAC\x00\x00'  # SampleRate (44100)
        b'\x88\x58\x01\x00'  # ByteRate (88200)
        b'\x02\x00'  # BlockAlign (2)
        b'\x10\x00'  # BitsPerSample (16)
        b'data'  # Subchunk2ID
        b'\x00\x00\x00\x00'  # Subchunk2Size (0 for empty audio)
    )
    
    # Simulate processing time
    time.sleep(0.1)
    
    return {
        "audio": base64.b64encode(wav_header).decode(),
        "format": request.format,
        "duration": 0.1,
        "engine": "sesame-mock"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

EXPOSE 8000

CMD ["python", "api_server.py"]